/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.smartx.tower.model.StepUnit;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TaskSteps
 */
@JsonPropertyOrder({
  TaskSteps.JSON_PROPERTY_UNIT,
  TaskSteps.JSON_PROPERTY_TOTAL,
  TaskSteps.JSON_PROPERTY_PER_SECOND,
  TaskSteps.JSON_PROPERTY_KEY,
  TaskSteps.JSON_PROPERTY_FINISHED,
  TaskSteps.JSON_PROPERTY_CURRENT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class TaskSteps {
  public static final String JSON_PROPERTY_UNIT = "unit";
  private JsonNullable<StepUnit> unit = JsonNullable.<StepUnit>undefined();

  public static final String JSON_PROPERTY_TOTAL = "total";
  private JsonNullable<Double> total = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PER_SECOND = "per_second";
  private JsonNullable<Double> perSecond = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_KEY = "key";
  private JsonNullable<String> key = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FINISHED = "finished";
  private JsonNullable<Boolean> finished = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_CURRENT = "current";
  private JsonNullable<Double> current = JsonNullable.<Double>undefined();


  public TaskSteps unit(StepUnit unit) {
    this.unit = JsonNullable.<StepUnit>of(unit);
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public StepUnit getUnit() {
        return unit.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<StepUnit> getUnit_JsonNullable() {
    return unit;
  }
  
  @JsonProperty(JSON_PROPERTY_UNIT)
  public void setUnit_JsonNullable(JsonNullable<StepUnit> unit) {
    this.unit = unit;
  }

  public void setUnit(StepUnit unit) {
    this.unit = JsonNullable.<StepUnit>of(unit);
  }


  public TaskSteps total(Double total) {
    this.total = JsonNullable.<Double>of(total);
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Double getTotal() {
        return total.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotal_JsonNullable() {
    return total;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL)
  public void setTotal_JsonNullable(JsonNullable<Double> total) {
    this.total = total;
  }

  public void setTotal(Double total) {
    this.total = JsonNullable.<Double>of(total);
  }


  public TaskSteps perSecond(Double perSecond) {
    this.perSecond = JsonNullable.<Double>of(perSecond);
    return this;
  }

   /**
   * Get perSecond
   * @return perSecond
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Double getPerSecond() {
        return perSecond.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PER_SECOND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPerSecond_JsonNullable() {
    return perSecond;
  }
  
  @JsonProperty(JSON_PROPERTY_PER_SECOND)
  public void setPerSecond_JsonNullable(JsonNullable<Double> perSecond) {
    this.perSecond = perSecond;
  }

  public void setPerSecond(Double perSecond) {
    this.perSecond = JsonNullable.<Double>of(perSecond);
  }


  public TaskSteps key(String key) {
    this.key = JsonNullable.<String>of(key);
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getKey() {
        return key.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getKey_JsonNullable() {
    return key;
  }
  
  @JsonProperty(JSON_PROPERTY_KEY)
  public void setKey_JsonNullable(JsonNullable<String> key) {
    this.key = key;
  }

  public void setKey(String key) {
    this.key = JsonNullable.<String>of(key);
  }


  public TaskSteps finished(Boolean finished) {
    this.finished = JsonNullable.<Boolean>of(finished);
    return this;
  }

   /**
   * Get finished
   * @return finished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Boolean getFinished() {
        return finished.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getFinished_JsonNullable() {
    return finished;
  }
  
  @JsonProperty(JSON_PROPERTY_FINISHED)
  public void setFinished_JsonNullable(JsonNullable<Boolean> finished) {
    this.finished = finished;
  }

  public void setFinished(Boolean finished) {
    this.finished = JsonNullable.<Boolean>of(finished);
  }


  public TaskSteps current(Double current) {
    this.current = JsonNullable.<Double>of(current);
    return this;
  }

   /**
   * Get current
   * @return current
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Double getCurrent() {
        return current.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCurrent_JsonNullable() {
    return current;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENT)
  public void setCurrent_JsonNullable(JsonNullable<Double> current) {
    this.current = current;
  }

  public void setCurrent(Double current) {
    this.current = JsonNullable.<Double>of(current);
  }


  /**
   * Return true if this Task_steps object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSteps taskSteps = (TaskSteps) o;
    return equalsNullable(this.unit, taskSteps.unit) &&
        equalsNullable(this.total, taskSteps.total) &&
        equalsNullable(this.perSecond, taskSteps.perSecond) &&
        equalsNullable(this.key, taskSteps.key) &&
        equalsNullable(this.finished, taskSteps.finished) &&
        equalsNullable(this.current, taskSteps.current);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(unit), hashCodeNullable(total), hashCodeNullable(perSecond), hashCodeNullable(key), hashCodeNullable(finished), hashCodeNullable(current));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSteps {\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    perSecond: ").append(toIndentedString(perSecond)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

