/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Gets or Sets LicenseOrderByInput
 */
public enum LicenseOrderByInput {
  
  CREATEDAT_ASC("createdAt_ASC"),
  
  CREATEDAT_DESC("createdAt_DESC"),
  
  EXPIRE_DATE_ASC("expire_date_ASC"),
  
  EXPIRE_DATE_DESC("expire_date_DESC"),
  
  ID_ASC("id_ASC"),
  
  ID_DESC("id_DESC"),
  
  LICENSE_SERIAL_ASC("license_serial_ASC"),
  
  LICENSE_SERIAL_DESC("license_serial_DESC"),
  
  MAINTENANCE_END_DATE_ASC("maintenance_end_date_ASC"),
  
  MAINTENANCE_END_DATE_DESC("maintenance_end_date_DESC"),
  
  MAINTENANCE_START_DATE_ASC("maintenance_start_date_ASC"),
  
  MAINTENANCE_START_DATE_DESC("maintenance_start_date_DESC"),
  
  MAX_CHUNK_NUM_ASC("max_chunk_num_ASC"),
  
  MAX_CHUNK_NUM_DESC("max_chunk_num_DESC"),
  
  MAX_CLUSTER_NUM_ASC("max_cluster_num_ASC"),
  
  MAX_CLUSTER_NUM_DESC("max_cluster_num_DESC"),
  
  SIGN_DATE_ASC("sign_date_ASC"),
  
  SIGN_DATE_DESC("sign_date_DESC"),
  
  SOFTWARE_EDITION_ASC("software_edition_ASC"),
  
  SOFTWARE_EDITION_DESC("software_edition_DESC"),
  
  TYPE_ASC("type_ASC"),
  
  TYPE_DESC("type_DESC"),
  
  UPDATEDAT_ASC("updatedAt_ASC"),
  
  UPDATEDAT_DESC("updatedAt_DESC");

  private String value;

  LicenseOrderByInput(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static LicenseOrderByInput fromValue(String value) {
    for (LicenseOrderByInput b : LicenseOrderByInput.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

