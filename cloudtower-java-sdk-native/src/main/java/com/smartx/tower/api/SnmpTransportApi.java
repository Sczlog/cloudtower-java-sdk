/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetSnmpTransportsConnectionRequestBody;
import com.smartx.tower.model.GetSnmpTransportsRequestBody;
import com.smartx.tower.model.SnmpTransport;
import com.smartx.tower.model.SnmpTransportConnection;
import com.smartx.tower.model.SnmpTransportCreationParams;
import com.smartx.tower.model.SnmpTransportDeletionParams;
import com.smartx.tower.model.SnmpTransportUpdationParams;
import com.smartx.tower.model.WithTaskDeleteSnmpTransport;
import com.smartx.tower.model.WithTaskSnmpTransport;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class SnmpTransportApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SnmpTransportApi() {
    this(new ApiClient());
  }

  public SnmpTransportApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportCreationParams  (required)
   * @return List&lt;WithTaskSnmpTransport&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnmpTransport> createSnmpTransport(String contentLanguage, List<SnmpTransportCreationParams> snmpTransportCreationParams) throws ApiException {
    ApiResponse<List<WithTaskSnmpTransport>> localVarResponse = createSnmpTransportWithHttpInfo(contentLanguage, snmpTransportCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnmpTransport&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnmpTransport>> createSnmpTransportWithHttpInfo(String contentLanguage, List<SnmpTransportCreationParams> snmpTransportCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSnmpTransportRequestBuilder(contentLanguage, snmpTransportCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createSnmpTransport", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnmpTransport>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnmpTransport>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSnmpTransportRequestBuilder(String contentLanguage, List<SnmpTransportCreationParams> snmpTransportCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createSnmpTransport");
    }
    // verify the required parameter 'snmpTransportCreationParams' is set
    if (snmpTransportCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snmpTransportCreationParams' when calling createSnmpTransport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-snmp-transport";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snmpTransportCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportDeletionParams  (required)
   * @return List&lt;WithTaskDeleteSnmpTransport&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteSnmpTransport> deleteSnmpTransport(String contentLanguage, SnmpTransportDeletionParams snmpTransportDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteSnmpTransport>> localVarResponse = deleteSnmpTransportWithHttpInfo(contentLanguage, snmpTransportDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteSnmpTransport&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteSnmpTransport>> deleteSnmpTransportWithHttpInfo(String contentLanguage, SnmpTransportDeletionParams snmpTransportDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSnmpTransportRequestBuilder(contentLanguage, snmpTransportDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteSnmpTransport", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteSnmpTransport>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteSnmpTransport>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSnmpTransportRequestBuilder(String contentLanguage, SnmpTransportDeletionParams snmpTransportDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteSnmpTransport");
    }
    // verify the required parameter 'snmpTransportDeletionParams' is set
    if (snmpTransportDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snmpTransportDeletionParams' when calling deleteSnmpTransport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-snmp-transport";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snmpTransportDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnmpTransportsRequestBody  (required)
   * @return List&lt;SnmpTransport&gt;
   * @throws ApiException if fails to make API call
   */
  public List<SnmpTransport> getSnmpTransports(String contentLanguage, GetSnmpTransportsRequestBody getSnmpTransportsRequestBody) throws ApiException {
    ApiResponse<List<SnmpTransport>> localVarResponse = getSnmpTransportsWithHttpInfo(contentLanguage, getSnmpTransportsRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnmpTransportsRequestBody  (required)
   * @return ApiResponse&lt;List&lt;SnmpTransport&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<SnmpTransport>> getSnmpTransportsWithHttpInfo(String contentLanguage, GetSnmpTransportsRequestBody getSnmpTransportsRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSnmpTransportsRequestBuilder(contentLanguage, getSnmpTransportsRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getSnmpTransports", localVarResponse);
      }
      return new ApiResponse<List<SnmpTransport>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<SnmpTransport>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSnmpTransportsRequestBuilder(String contentLanguage, GetSnmpTransportsRequestBody getSnmpTransportsRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getSnmpTransports");
    }
    // verify the required parameter 'getSnmpTransportsRequestBody' is set
    if (getSnmpTransportsRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getSnmpTransportsRequestBody' when calling getSnmpTransports");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-snmp-transports";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getSnmpTransportsRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnmpTransportsConnectionRequestBody  (required)
   * @return SnmpTransportConnection
   * @throws ApiException if fails to make API call
   */
  public SnmpTransportConnection getSnmpTransportsConnection(String contentLanguage, GetSnmpTransportsConnectionRequestBody getSnmpTransportsConnectionRequestBody) throws ApiException {
    ApiResponse<SnmpTransportConnection> localVarResponse = getSnmpTransportsConnectionWithHttpInfo(contentLanguage, getSnmpTransportsConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnmpTransportsConnectionRequestBody  (required)
   * @return ApiResponse&lt;SnmpTransportConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SnmpTransportConnection> getSnmpTransportsConnectionWithHttpInfo(String contentLanguage, GetSnmpTransportsConnectionRequestBody getSnmpTransportsConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSnmpTransportsConnectionRequestBuilder(contentLanguage, getSnmpTransportsConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getSnmpTransportsConnection", localVarResponse);
      }
      return new ApiResponse<SnmpTransportConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SnmpTransportConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSnmpTransportsConnectionRequestBuilder(String contentLanguage, GetSnmpTransportsConnectionRequestBody getSnmpTransportsConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getSnmpTransportsConnection");
    }
    // verify the required parameter 'getSnmpTransportsConnectionRequestBody' is set
    if (getSnmpTransportsConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getSnmpTransportsConnectionRequestBody' when calling getSnmpTransportsConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-snmp-transports-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getSnmpTransportsConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportUpdationParams  (required)
   * @return List&lt;WithTaskSnmpTransport&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnmpTransport> updateSnmpTransport(String contentLanguage, SnmpTransportUpdationParams snmpTransportUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskSnmpTransport>> localVarResponse = updateSnmpTransportWithHttpInfo(contentLanguage, snmpTransportUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snmpTransportUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnmpTransport&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnmpTransport>> updateSnmpTransportWithHttpInfo(String contentLanguage, SnmpTransportUpdationParams snmpTransportUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSnmpTransportRequestBuilder(contentLanguage, snmpTransportUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateSnmpTransport", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnmpTransport>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnmpTransport>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSnmpTransportRequestBuilder(String contentLanguage, SnmpTransportUpdationParams snmpTransportUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateSnmpTransport");
    }
    // verify the required parameter 'snmpTransportUpdationParams' is set
    if (snmpTransportUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snmpTransportUpdationParams' when calling updateSnmpTransport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-snmp-transport";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snmpTransportUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
