/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.ConvertVmTemplateToVmParams;
import com.smartx.tower.model.GetVmsConnectionRequestBody;
import com.smartx.tower.model.GetVmsRequestBody;
import com.smartx.tower.model.InlineResponse200;
import com.smartx.tower.model.InstallVmtoolsParams;
import com.smartx.tower.model.Vm;
import com.smartx.tower.model.VmAddCdRomParams;
import com.smartx.tower.model.VmAddDiskParams;
import com.smartx.tower.model.VmAddFolderParams;
import com.smartx.tower.model.VmAddNicParams;
import com.smartx.tower.model.VmCloneParams;
import com.smartx.tower.model.VmConnection;
import com.smartx.tower.model.VmCreateVmFromTemplateParams;
import com.smartx.tower.model.VmCreationParams;
import com.smartx.tower.model.VmMigrateParams;
import com.smartx.tower.model.VmOperateParams;
import com.smartx.tower.model.VmRebuildParams;
import com.smartx.tower.model.VmRemoveCdRomParams;
import com.smartx.tower.model.VmRemoveDiskParams;
import com.smartx.tower.model.VmRemoveNicParams;
import com.smartx.tower.model.VmRollbackParams;
import com.smartx.tower.model.VmStartParams;
import com.smartx.tower.model.VmUpdateDiskParams;
import com.smartx.tower.model.VmUpdateNicParams;
import com.smartx.tower.model.VmUpdateParams;
import com.smartx.tower.model.WithTaskVm;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class VmApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public VmApi() {
    this(new ApiClient());
  }

  public VmApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddCdRomParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> addVmCdRom(String contentLanguage, VmAddCdRomParams vmAddCdRomParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = addVmCdRomWithHttpInfo(contentLanguage, vmAddCdRomParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddCdRomParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> addVmCdRomWithHttpInfo(String contentLanguage, VmAddCdRomParams vmAddCdRomParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addVmCdRomRequestBuilder(contentLanguage, vmAddCdRomParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("addVmCdRom", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addVmCdRomRequestBuilder(String contentLanguage, VmAddCdRomParams vmAddCdRomParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling addVmCdRom");
    }
    // verify the required parameter 'vmAddCdRomParams' is set
    if (vmAddCdRomParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmAddCdRomParams' when calling addVmCdRom");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/add-vm-cd-rom";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmAddCdRomParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddDiskParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> addVmDisk(String contentLanguage, VmAddDiskParams vmAddDiskParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = addVmDiskWithHttpInfo(contentLanguage, vmAddDiskParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddDiskParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> addVmDiskWithHttpInfo(String contentLanguage, VmAddDiskParams vmAddDiskParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addVmDiskRequestBuilder(contentLanguage, vmAddDiskParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("addVmDisk", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addVmDiskRequestBuilder(String contentLanguage, VmAddDiskParams vmAddDiskParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling addVmDisk");
    }
    // verify the required parameter 'vmAddDiskParams' is set
    if (vmAddDiskParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmAddDiskParams' when calling addVmDisk");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/add-vm-disk";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmAddDiskParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddNicParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> addVmNic(String contentLanguage, VmAddNicParams vmAddNicParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = addVmNicWithHttpInfo(contentLanguage, vmAddNicParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddNicParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> addVmNicWithHttpInfo(String contentLanguage, VmAddNicParams vmAddNicParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addVmNicRequestBuilder(contentLanguage, vmAddNicParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("addVmNic", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addVmNicRequestBuilder(String contentLanguage, VmAddNicParams vmAddNicParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling addVmNic");
    }
    // verify the required parameter 'vmAddNicParams' is set
    if (vmAddNicParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmAddNicParams' when calling addVmNic");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/add-vm-nic";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmAddNicParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddFolderParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> addVmToFolder(String contentLanguage, VmAddFolderParams vmAddFolderParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = addVmToFolderWithHttpInfo(contentLanguage, vmAddFolderParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmAddFolderParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> addVmToFolderWithHttpInfo(String contentLanguage, VmAddFolderParams vmAddFolderParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addVmToFolderRequestBuilder(contentLanguage, vmAddFolderParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("addVmToFolder", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addVmToFolderRequestBuilder(String contentLanguage, VmAddFolderParams vmAddFolderParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling addVmToFolder");
    }
    // verify the required parameter 'vmAddFolderParams' is set
    if (vmAddFolderParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmAddFolderParams' when calling addVmToFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/add-vm-to-folder";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmAddFolderParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCloneParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> cloneVm(String contentLanguage, List<VmCloneParams> vmCloneParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = cloneVmWithHttpInfo(contentLanguage, vmCloneParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCloneParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> cloneVmWithHttpInfo(String contentLanguage, List<VmCloneParams> vmCloneParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloneVmRequestBuilder(contentLanguage, vmCloneParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("cloneVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloneVmRequestBuilder(String contentLanguage, List<VmCloneParams> vmCloneParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling cloneVm");
    }
    // verify the required parameter 'vmCloneParams' is set
    if (vmCloneParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmCloneParams' when calling cloneVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/clone-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmCloneParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param convertVmTemplateToVmParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> convertVmTemplateToVm(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = convertVmTemplateToVmWithHttpInfo(contentLanguage, convertVmTemplateToVmParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param convertVmTemplateToVmParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> convertVmTemplateToVmWithHttpInfo(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertVmTemplateToVmRequestBuilder(contentLanguage, convertVmTemplateToVmParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("convertVmTemplateToVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertVmTemplateToVmRequestBuilder(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling convertVmTemplateToVm");
    }
    // verify the required parameter 'convertVmTemplateToVmParams' is set
    if (convertVmTemplateToVmParams == null) {
      throw new ApiException(400, "Missing the required parameter 'convertVmTemplateToVmParams' when calling convertVmTemplateToVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert-vm-template-to-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(convertVmTemplateToVmParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCreationParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> createVm(String contentLanguage, List<VmCreationParams> vmCreationParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = createVmWithHttpInfo(contentLanguage, vmCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> createVmWithHttpInfo(String contentLanguage, List<VmCreationParams> vmCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createVmRequestBuilder(contentLanguage, vmCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createVmRequestBuilder(String contentLanguage, List<VmCreationParams> vmCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createVm");
    }
    // verify the required parameter 'vmCreationParams' is set
    if (vmCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmCreationParams' when calling createVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCreateVmFromTemplateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> createVmFromTemplate(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = createVmFromTemplateWithHttpInfo(contentLanguage, vmCreateVmFromTemplateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmCreateVmFromTemplateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> createVmFromTemplateWithHttpInfo(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createVmFromTemplateRequestBuilder(contentLanguage, vmCreateVmFromTemplateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createVmFromTemplate", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createVmFromTemplateRequestBuilder(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createVmFromTemplate");
    }
    // verify the required parameter 'vmCreateVmFromTemplateParams' is set
    if (vmCreateVmFromTemplateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmCreateVmFromTemplateParams' when calling createVmFromTemplate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-vm-from-template";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmCreateVmFromTemplateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;InlineResponse200&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InlineResponse200> deleteVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<InlineResponse200>> localVarResponse = deleteVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<InlineResponse200>> deleteVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteVm", localVarResponse);
      }
      return new ApiResponse<List<InlineResponse200>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<InlineResponse200>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling deleteVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> forceRestartVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = forceRestartVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> forceRestartVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = forceRestartVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("forceRestartVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder forceRestartVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling forceRestartVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling forceRestartVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/force-restart-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> forceShutDownVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = forceShutDownVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> forceShutDownVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = forceShutDownVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("forceShutDownVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder forceShutDownVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling forceShutDownVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling forceShutDownVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/poweroff-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmsRequestBody  (required)
   * @return List&lt;Vm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Vm> getVms(String contentLanguage, GetVmsRequestBody getVmsRequestBody) throws ApiException {
    ApiResponse<List<Vm>> localVarResponse = getVmsWithHttpInfo(contentLanguage, getVmsRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmsRequestBody  (required)
   * @return ApiResponse&lt;List&lt;Vm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Vm>> getVmsWithHttpInfo(String contentLanguage, GetVmsRequestBody getVmsRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVmsRequestBuilder(contentLanguage, getVmsRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getVms", localVarResponse);
      }
      return new ApiResponse<List<Vm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Vm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVmsRequestBuilder(String contentLanguage, GetVmsRequestBody getVmsRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getVms");
    }
    // verify the required parameter 'getVmsRequestBody' is set
    if (getVmsRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getVmsRequestBody' when calling getVms");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-vms";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getVmsRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmsConnectionRequestBody  (required)
   * @return VmConnection
   * @throws ApiException if fails to make API call
   */
  public VmConnection getVmsConnection(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody) throws ApiException {
    ApiResponse<VmConnection> localVarResponse = getVmsConnectionWithHttpInfo(contentLanguage, getVmsConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmsConnectionRequestBody  (required)
   * @return ApiResponse&lt;VmConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VmConnection> getVmsConnectionWithHttpInfo(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVmsConnectionRequestBuilder(contentLanguage, getVmsConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getVmsConnection", localVarResponse);
      }
      return new ApiResponse<VmConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VmConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVmsConnectionRequestBuilder(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getVmsConnection");
    }
    // verify the required parameter 'getVmsConnectionRequestBody' is set
    if (getVmsConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getVmsConnectionRequestBody' when calling getVmsConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-vms-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getVmsConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param installVmtoolsParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> installVmtools(String contentLanguage, InstallVmtoolsParams installVmtoolsParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = installVmtoolsWithHttpInfo(contentLanguage, installVmtoolsParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param installVmtoolsParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> installVmtoolsWithHttpInfo(String contentLanguage, InstallVmtoolsParams installVmtoolsParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = installVmtoolsRequestBuilder(contentLanguage, installVmtoolsParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("installVmtools", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder installVmtoolsRequestBuilder(String contentLanguage, InstallVmtoolsParams installVmtoolsParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling installVmtools");
    }
    // verify the required parameter 'installVmtoolsParams' is set
    if (installVmtoolsParams == null) {
      throw new ApiException(400, "Missing the required parameter 'installVmtoolsParams' when calling installVmtools");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/install-vmtools";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(installVmtoolsParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmMigrateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> migRateVm(String contentLanguage, VmMigrateParams vmMigrateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = migRateVmWithHttpInfo(contentLanguage, vmMigrateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmMigrateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> migRateVmWithHttpInfo(String contentLanguage, VmMigrateParams vmMigrateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = migRateVmRequestBuilder(contentLanguage, vmMigrateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("migRateVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder migRateVmRequestBuilder(String contentLanguage, VmMigrateParams vmMigrateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling migRateVm");
    }
    // verify the required parameter 'vmMigrateParams' is set
    if (vmMigrateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmMigrateParams' when calling migRateVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/migrate-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmMigrateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;InlineResponse200&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InlineResponse200> moveVmToRecycleBin(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<InlineResponse200>> localVarResponse = moveVmToRecycleBinWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<InlineResponse200>> moveVmToRecycleBinWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveVmToRecycleBinRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("moveVmToRecycleBin", localVarResponse);
      }
      return new ApiResponse<List<InlineResponse200>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<InlineResponse200>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveVmToRecycleBinRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling moveVmToRecycleBin");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling moveVmToRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/move-vm-to-recycle";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRebuildParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> rebuildVm(String contentLanguage, List<VmRebuildParams> vmRebuildParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = rebuildVmWithHttpInfo(contentLanguage, vmRebuildParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRebuildParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> rebuildVmWithHttpInfo(String contentLanguage, List<VmRebuildParams> vmRebuildParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rebuildVmRequestBuilder(contentLanguage, vmRebuildParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("rebuildVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rebuildVmRequestBuilder(String contentLanguage, List<VmRebuildParams> vmRebuildParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling rebuildVm");
    }
    // verify the required parameter 'vmRebuildParams' is set
    if (vmRebuildParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmRebuildParams' when calling rebuildVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rebuild-vm-from-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmRebuildParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;InlineResponse200&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InlineResponse200> recoverVmFromRecycleBin(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<InlineResponse200>> localVarResponse = recoverVmFromRecycleBinWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<InlineResponse200>> recoverVmFromRecycleBinWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recoverVmFromRecycleBinRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("recoverVmFromRecycleBin", localVarResponse);
      }
      return new ApiResponse<List<InlineResponse200>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<InlineResponse200>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recoverVmFromRecycleBinRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling recoverVmFromRecycleBin");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling recoverVmFromRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/recover-vm-from-recycle";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveCdRomParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> removeVmCdRom(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = removeVmCdRomWithHttpInfo(contentLanguage, vmRemoveCdRomParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveCdRomParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> removeVmCdRomWithHttpInfo(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeVmCdRomRequestBuilder(contentLanguage, vmRemoveCdRomParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("removeVmCdRom", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeVmCdRomRequestBuilder(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling removeVmCdRom");
    }
    // verify the required parameter 'vmRemoveCdRomParams' is set
    if (vmRemoveCdRomParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmRemoveCdRomParams' when calling removeVmCdRom");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/remove-vm-cd-rom";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmRemoveCdRomParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveDiskParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> removeVmDisk(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = removeVmDiskWithHttpInfo(contentLanguage, vmRemoveDiskParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveDiskParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> removeVmDiskWithHttpInfo(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeVmDiskRequestBuilder(contentLanguage, vmRemoveDiskParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("removeVmDisk", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeVmDiskRequestBuilder(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling removeVmDisk");
    }
    // verify the required parameter 'vmRemoveDiskParams' is set
    if (vmRemoveDiskParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmRemoveDiskParams' when calling removeVmDisk");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/remove-vm-disk";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmRemoveDiskParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveNicParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> removeVmNic(String contentLanguage, VmRemoveNicParams vmRemoveNicParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = removeVmNicWithHttpInfo(contentLanguage, vmRemoveNicParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRemoveNicParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> removeVmNicWithHttpInfo(String contentLanguage, VmRemoveNicParams vmRemoveNicParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeVmNicRequestBuilder(contentLanguage, vmRemoveNicParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("removeVmNic", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeVmNicRequestBuilder(String contentLanguage, VmRemoveNicParams vmRemoveNicParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling removeVmNic");
    }
    // verify the required parameter 'vmRemoveNicParams' is set
    if (vmRemoveNicParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmRemoveNicParams' when calling removeVmNic");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/remove-vm-nic";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmRemoveNicParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> removeVmToFolder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = removeVmToFolderWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> removeVmToFolderWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeVmToFolderRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("removeVmToFolder", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeVmToFolderRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling removeVmToFolder");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling removeVmToFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/remove-vm-from-folder";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> restartVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = restartVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> restartVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = restartVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("restartVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder restartVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling restartVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling restartVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/restart-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> resumeVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = resumeVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> resumeVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resumeVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("resumeVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resumeVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling resumeVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling resumeVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resume-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRollbackParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> rollbackVm(String contentLanguage, VmRollbackParams vmRollbackParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = rollbackVmWithHttpInfo(contentLanguage, vmRollbackParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmRollbackParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> rollbackVmWithHttpInfo(String contentLanguage, VmRollbackParams vmRollbackParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rollbackVmRequestBuilder(contentLanguage, vmRollbackParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("rollbackVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rollbackVmRequestBuilder(String contentLanguage, VmRollbackParams vmRollbackParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling rollbackVm");
    }
    // verify the required parameter 'vmRollbackParams' is set
    if (vmRollbackParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmRollbackParams' when calling rollbackVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rollback-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmRollbackParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> shutDownVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = shutDownVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> shutDownVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = shutDownVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("shutDownVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder shutDownVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling shutDownVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling shutDownVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/shutdown-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmStartParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> startVm(String contentLanguage, VmStartParams vmStartParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = startVmWithHttpInfo(contentLanguage, vmStartParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmStartParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> startVmWithHttpInfo(String contentLanguage, VmStartParams vmStartParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startVmRequestBuilder(contentLanguage, vmStartParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("startVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startVmRequestBuilder(String contentLanguage, VmStartParams vmStartParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling startVm");
    }
    // verify the required parameter 'vmStartParams' is set
    if (vmStartParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmStartParams' when calling startVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/start-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmStartParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> suspendVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = suspendVmWithHttpInfo(contentLanguage, vmOperateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmOperateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> suspendVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = suspendVmRequestBuilder(contentLanguage, vmOperateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("suspendVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder suspendVmRequestBuilder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling suspendVm");
    }
    // verify the required parameter 'vmOperateParams' is set
    if (vmOperateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmOperateParams' when calling suspendVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/suspend-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmOperateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> updateVm(String contentLanguage, VmUpdateParams vmUpdateParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = updateVmWithHttpInfo(contentLanguage, vmUpdateParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> updateVmWithHttpInfo(String contentLanguage, VmUpdateParams vmUpdateParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateVmRequestBuilder(contentLanguage, vmUpdateParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateVmRequestBuilder(String contentLanguage, VmUpdateParams vmUpdateParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateVm");
    }
    // verify the required parameter 'vmUpdateParams' is set
    if (vmUpdateParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmUpdateParams' when calling updateVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-vm-basic-info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmUpdateParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateDiskParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> updateVmDisk(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = updateVmDiskWithHttpInfo(contentLanguage, vmUpdateDiskParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateDiskParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> updateVmDiskWithHttpInfo(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateVmDiskRequestBuilder(contentLanguage, vmUpdateDiskParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateVmDisk", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateVmDiskRequestBuilder(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateVmDisk");
    }
    // verify the required parameter 'vmUpdateDiskParams' is set
    if (vmUpdateDiskParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmUpdateDiskParams' when calling updateVmDisk");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-vm-disk";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmUpdateDiskParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateNicParams  (required)
   * @return List&lt;WithTaskVm&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVm> updateVmNic(String contentLanguage, VmUpdateNicParams vmUpdateNicParams) throws ApiException {
    ApiResponse<List<WithTaskVm>> localVarResponse = updateVmNicWithHttpInfo(contentLanguage, vmUpdateNicParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmUpdateNicParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVm>> updateVmNicWithHttpInfo(String contentLanguage, VmUpdateNicParams vmUpdateNicParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateVmNicRequestBuilder(contentLanguage, vmUpdateNicParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateVmNic", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVm>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVm>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateVmNicRequestBuilder(String contentLanguage, VmUpdateNicParams vmUpdateNicParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateVmNic");
    }
    // verify the required parameter 'vmUpdateNicParams' is set
    if (vmUpdateNicParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmUpdateNicParams' when calling updateVmNic");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-vm-nic";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmUpdateNicParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
