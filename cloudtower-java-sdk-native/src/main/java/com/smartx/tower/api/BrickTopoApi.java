/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.BrickTopo;
import com.smartx.tower.model.BrickTopoConnection;
import com.smartx.tower.model.BrickTopoCreationParams;
import com.smartx.tower.model.BrickTopoDeletionParams;
import com.smartx.tower.model.BrickTopoMoveParams;
import com.smartx.tower.model.BrickTopoUpdationParams;
import com.smartx.tower.model.GetBrickTopoesConnectionRequestBody;
import com.smartx.tower.model.GetBrickTopoesRequestBody;
import com.smartx.tower.model.WithTaskBrickTopo;
import com.smartx.tower.model.WithTaskDeleteBrickTopo;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class BrickTopoApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public BrickTopoApi() {
    this(new ApiClient());
  }

  public BrickTopoApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoCreationParams  (required)
   * @return List&lt;WithTaskBrickTopo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskBrickTopo> createBrickTopo(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams) throws ApiException {
    ApiResponse<List<WithTaskBrickTopo>> localVarResponse = createBrickTopoWithHttpInfo(contentLanguage, brickTopoCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskBrickTopo>> createBrickTopoWithHttpInfo(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createBrickTopoRequestBuilder(contentLanguage, brickTopoCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createBrickTopo", localVarResponse);
      }
      return new ApiResponse<List<WithTaskBrickTopo>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskBrickTopo>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createBrickTopoRequestBuilder(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createBrickTopo");
    }
    // verify the required parameter 'brickTopoCreationParams' is set
    if (brickTopoCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'brickTopoCreationParams' when calling createBrickTopo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-brick-topo";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(brickTopoCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoDeletionParams  (required)
   * @return List&lt;WithTaskDeleteBrickTopo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteBrickTopo> deleteBrickTopo(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteBrickTopo>> localVarResponse = deleteBrickTopoWithHttpInfo(contentLanguage, brickTopoDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteBrickTopo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteBrickTopo>> deleteBrickTopoWithHttpInfo(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteBrickTopoRequestBuilder(contentLanguage, brickTopoDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteBrickTopo", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteBrickTopo>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteBrickTopo>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteBrickTopoRequestBuilder(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteBrickTopo");
    }
    // verify the required parameter 'brickTopoDeletionParams' is set
    if (brickTopoDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'brickTopoDeletionParams' when calling deleteBrickTopo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-brick-topo";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(brickTopoDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getBrickTopoesRequestBody  (required)
   * @return List&lt;BrickTopo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BrickTopo> getBrickTopoes(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody) throws ApiException {
    ApiResponse<List<BrickTopo>> localVarResponse = getBrickTopoesWithHttpInfo(contentLanguage, getBrickTopoesRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getBrickTopoesRequestBody  (required)
   * @return ApiResponse&lt;List&lt;BrickTopo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<BrickTopo>> getBrickTopoesWithHttpInfo(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBrickTopoesRequestBuilder(contentLanguage, getBrickTopoesRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getBrickTopoes", localVarResponse);
      }
      return new ApiResponse<List<BrickTopo>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BrickTopo>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBrickTopoesRequestBuilder(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getBrickTopoes");
    }
    // verify the required parameter 'getBrickTopoesRequestBody' is set
    if (getBrickTopoesRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getBrickTopoesRequestBody' when calling getBrickTopoes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-brick-topoes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getBrickTopoesRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getBrickTopoesConnectionRequestBody  (required)
   * @return BrickTopoConnection
   * @throws ApiException if fails to make API call
   */
  public BrickTopoConnection getBrickTopoesConnection(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody) throws ApiException {
    ApiResponse<BrickTopoConnection> localVarResponse = getBrickTopoesConnectionWithHttpInfo(contentLanguage, getBrickTopoesConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getBrickTopoesConnectionRequestBody  (required)
   * @return ApiResponse&lt;BrickTopoConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrickTopoConnection> getBrickTopoesConnectionWithHttpInfo(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBrickTopoesConnectionRequestBuilder(contentLanguage, getBrickTopoesConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getBrickTopoesConnection", localVarResponse);
      }
      return new ApiResponse<BrickTopoConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrickTopoConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBrickTopoesConnectionRequestBuilder(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getBrickTopoesConnection");
    }
    // verify the required parameter 'getBrickTopoesConnectionRequestBody' is set
    if (getBrickTopoesConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getBrickTopoesConnectionRequestBody' when calling getBrickTopoesConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-brick-topoes-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getBrickTopoesConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoMoveParams  (required)
   * @return List&lt;WithTaskBrickTopo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskBrickTopo> moveBrickTopo(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams) throws ApiException {
    ApiResponse<List<WithTaskBrickTopo>> localVarResponse = moveBrickTopoWithHttpInfo(contentLanguage, brickTopoMoveParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoMoveParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskBrickTopo>> moveBrickTopoWithHttpInfo(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveBrickTopoRequestBuilder(contentLanguage, brickTopoMoveParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("moveBrickTopo", localVarResponse);
      }
      return new ApiResponse<List<WithTaskBrickTopo>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskBrickTopo>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveBrickTopoRequestBuilder(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling moveBrickTopo");
    }
    // verify the required parameter 'brickTopoMoveParams' is set
    if (brickTopoMoveParams == null) {
      throw new ApiException(400, "Missing the required parameter 'brickTopoMoveParams' when calling moveBrickTopo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/move-brick-topo";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(brickTopoMoveParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoUpdationParams  (required)
   * @return List&lt;WithTaskBrickTopo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskBrickTopo> updateBrickTopo(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskBrickTopo>> localVarResponse = updateBrickTopoWithHttpInfo(contentLanguage, brickTopoUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param brickTopoUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskBrickTopo>> updateBrickTopoWithHttpInfo(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateBrickTopoRequestBuilder(contentLanguage, brickTopoUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateBrickTopo", localVarResponse);
      }
      return new ApiResponse<List<WithTaskBrickTopo>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskBrickTopo>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateBrickTopoRequestBuilder(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateBrickTopo");
    }
    // verify the required parameter 'brickTopoUpdationParams' is set
    if (brickTopoUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'brickTopoUpdationParams' when calling updateBrickTopo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-brick-topo";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(brickTopoUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
