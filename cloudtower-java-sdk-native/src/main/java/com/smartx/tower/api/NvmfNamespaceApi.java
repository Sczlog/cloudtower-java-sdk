/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetNvmfNamespacesConnectionRequestBody;
import com.smartx.tower.model.GetNvmfNamespacesRequestBody;
import com.smartx.tower.model.NvmfNamespace;
import com.smartx.tower.model.NvmfNamespaceCloneParams;
import com.smartx.tower.model.NvmfNamespaceConnection;
import com.smartx.tower.model.NvmfNamespaceCreationParams;
import com.smartx.tower.model.NvmfNamespaceDeletionParams;
import com.smartx.tower.model.NvmfNamespaceRollbackParams;
import com.smartx.tower.model.NvmfNamespaceUpdationParams;
import com.smartx.tower.model.WithTaskDeleteNvmfNamespace;
import com.smartx.tower.model.WithTaskNvmfNamespace;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class NvmfNamespaceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public NvmfNamespaceApi() {
    this(new ApiClient());
  }

  public NvmfNamespaceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceCloneParams  (required)
   * @return List&lt;WithTaskNvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskNvmfNamespace> cloneNvmfNamespaceFromSnapshot(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams) throws ApiException {
    ApiResponse<List<WithTaskNvmfNamespace>> localVarResponse = cloneNvmfNamespaceFromSnapshotWithHttpInfo(contentLanguage, nvmfNamespaceCloneParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceCloneParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskNvmfNamespace>> cloneNvmfNamespaceFromSnapshotWithHttpInfo(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloneNvmfNamespaceFromSnapshotRequestBuilder(contentLanguage, nvmfNamespaceCloneParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("cloneNvmfNamespaceFromSnapshot", localVarResponse);
      }
      return new ApiResponse<List<WithTaskNvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskNvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloneNvmfNamespaceFromSnapshotRequestBuilder(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling cloneNvmfNamespaceFromSnapshot");
    }
    // verify the required parameter 'nvmfNamespaceCloneParams' is set
    if (nvmfNamespaceCloneParams == null) {
      throw new ApiException(400, "Missing the required parameter 'nvmfNamespaceCloneParams' when calling cloneNvmfNamespaceFromSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/clone-nvmf-namespace-from-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nvmfNamespaceCloneParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceCreationParams  (required)
   * @return List&lt;WithTaskNvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskNvmfNamespace> createNvmfNamespace(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams) throws ApiException {
    ApiResponse<List<WithTaskNvmfNamespace>> localVarResponse = createNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskNvmfNamespace>> createNvmfNamespaceWithHttpInfo(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createNvmfNamespaceRequestBuilder(contentLanguage, nvmfNamespaceCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createNvmfNamespace", localVarResponse);
      }
      return new ApiResponse<List<WithTaskNvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskNvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createNvmfNamespaceRequestBuilder(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createNvmfNamespace");
    }
    // verify the required parameter 'nvmfNamespaceCreationParams' is set
    if (nvmfNamespaceCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'nvmfNamespaceCreationParams' when calling createNvmfNamespace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-nvmf-namespace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nvmfNamespaceCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceDeletionParams  (required)
   * @return List&lt;WithTaskDeleteNvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteNvmfNamespace> deleteNvmfNamespace(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteNvmfNamespace>> localVarResponse = deleteNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteNvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteNvmfNamespace>> deleteNvmfNamespaceWithHttpInfo(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteNvmfNamespaceRequestBuilder(contentLanguage, nvmfNamespaceDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteNvmfNamespace", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteNvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteNvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteNvmfNamespaceRequestBuilder(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteNvmfNamespace");
    }
    // verify the required parameter 'nvmfNamespaceDeletionParams' is set
    if (nvmfNamespaceDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'nvmfNamespaceDeletionParams' when calling deleteNvmfNamespace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-nvmf-namespace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nvmfNamespaceDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getNvmfNamespacesRequestBody  (required)
   * @return List&lt;NvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<NvmfNamespace> getNvmfNamespaces(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody) throws ApiException {
    ApiResponse<List<NvmfNamespace>> localVarResponse = getNvmfNamespacesWithHttpInfo(contentLanguage, getNvmfNamespacesRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getNvmfNamespacesRequestBody  (required)
   * @return ApiResponse&lt;List&lt;NvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<NvmfNamespace>> getNvmfNamespacesWithHttpInfo(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNvmfNamespacesRequestBuilder(contentLanguage, getNvmfNamespacesRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNvmfNamespaces", localVarResponse);
      }
      return new ApiResponse<List<NvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<NvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNvmfNamespacesRequestBuilder(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getNvmfNamespaces");
    }
    // verify the required parameter 'getNvmfNamespacesRequestBody' is set
    if (getNvmfNamespacesRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getNvmfNamespacesRequestBody' when calling getNvmfNamespaces");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-nvmf-namespaces";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getNvmfNamespacesRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getNvmfNamespacesConnectionRequestBody  (required)
   * @return NvmfNamespaceConnection
   * @throws ApiException if fails to make API call
   */
  public NvmfNamespaceConnection getNvmfNamespacesConnection(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody) throws ApiException {
    ApiResponse<NvmfNamespaceConnection> localVarResponse = getNvmfNamespacesConnectionWithHttpInfo(contentLanguage, getNvmfNamespacesConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getNvmfNamespacesConnectionRequestBody  (required)
   * @return ApiResponse&lt;NvmfNamespaceConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NvmfNamespaceConnection> getNvmfNamespacesConnectionWithHttpInfo(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNvmfNamespacesConnectionRequestBuilder(contentLanguage, getNvmfNamespacesConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNvmfNamespacesConnection", localVarResponse);
      }
      return new ApiResponse<NvmfNamespaceConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NvmfNamespaceConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNvmfNamespacesConnectionRequestBuilder(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getNvmfNamespacesConnection");
    }
    // verify the required parameter 'getNvmfNamespacesConnectionRequestBody' is set
    if (getNvmfNamespacesConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getNvmfNamespacesConnectionRequestBody' when calling getNvmfNamespacesConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-nvmf-namespaces-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getNvmfNamespacesConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceRollbackParams  (required)
   * @return List&lt;WithTaskNvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskNvmfNamespace> rollbackNvmfNamespaceFromSnapshot(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams) throws ApiException {
    ApiResponse<List<WithTaskNvmfNamespace>> localVarResponse = rollbackNvmfNamespaceFromSnapshotWithHttpInfo(contentLanguage, nvmfNamespaceRollbackParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceRollbackParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskNvmfNamespace>> rollbackNvmfNamespaceFromSnapshotWithHttpInfo(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rollbackNvmfNamespaceFromSnapshotRequestBuilder(contentLanguage, nvmfNamespaceRollbackParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("rollbackNvmfNamespaceFromSnapshot", localVarResponse);
      }
      return new ApiResponse<List<WithTaskNvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskNvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rollbackNvmfNamespaceFromSnapshotRequestBuilder(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling rollbackNvmfNamespaceFromSnapshot");
    }
    // verify the required parameter 'nvmfNamespaceRollbackParams' is set
    if (nvmfNamespaceRollbackParams == null) {
      throw new ApiException(400, "Missing the required parameter 'nvmfNamespaceRollbackParams' when calling rollbackNvmfNamespaceFromSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rollback-nvmf-namespace-from-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nvmfNamespaceRollbackParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceUpdationParams  (required)
   * @return List&lt;WithTaskNvmfNamespace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskNvmfNamespace> updateNvmfNamespace(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskNvmfNamespace>> localVarResponse = updateNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param nvmfNamespaceUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskNvmfNamespace>> updateNvmfNamespaceWithHttpInfo(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateNvmfNamespaceRequestBuilder(contentLanguage, nvmfNamespaceUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateNvmfNamespace", localVarResponse);
      }
      return new ApiResponse<List<WithTaskNvmfNamespace>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskNvmfNamespace>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateNvmfNamespaceRequestBuilder(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateNvmfNamespace");
    }
    // verify the required parameter 'nvmfNamespaceUpdationParams' is set
    if (nvmfNamespaceUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'nvmfNamespaceUpdationParams' when calling updateNvmfNamespace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-nvmf-namespace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nvmfNamespaceUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
