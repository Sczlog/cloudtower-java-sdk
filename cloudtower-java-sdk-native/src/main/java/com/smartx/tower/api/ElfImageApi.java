/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.ElfImage;
import com.smartx.tower.model.ElfImageConnection;
import com.smartx.tower.model.ElfImageDeletionParams;
import com.smartx.tower.model.ElfImageUpdationParams;
import java.io.File;
import com.smartx.tower.model.GetElfImagesConnectionRequestBody;
import com.smartx.tower.model.GetElfImagesRequestBody;
import com.smartx.tower.model.UploadTask;
import com.smartx.tower.model.WithTaskDeleteElfImage;
import com.smartx.tower.model.WithTaskElfImage;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class ElfImageApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ElfImageApi() {
    this(new ApiClient());
  }

  public ElfImageApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param file  (required)
   * @param clusterId  (required)
   * @param name  (required)
   * @param size  (required)
   * @param description  (required)
   * @param uploadTaskId  (required)
   * @return List&lt;UploadTask&gt;
   * @throws ApiException if fails to make API call
   */
  public List<UploadTask> createElfImage(String contentLanguage, File file, String clusterId, String name, String size, String description, String uploadTaskId) throws ApiException {
    ApiResponse<List<UploadTask>> localVarResponse = createElfImageWithHttpInfo(contentLanguage, file, clusterId, name, size, description, uploadTaskId);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param file  (required)
   * @param clusterId  (required)
   * @param name  (required)
   * @param size  (required)
   * @param description  (required)
   * @param uploadTaskId  (required)
   * @return ApiResponse&lt;List&lt;UploadTask&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<UploadTask>> createElfImageWithHttpInfo(String contentLanguage, File file, String clusterId, String name, String size, String description, String uploadTaskId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createElfImageRequestBuilder(contentLanguage, file, clusterId, name, size, description, uploadTaskId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createElfImage", localVarResponse);
      }
      return new ApiResponse<List<UploadTask>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<UploadTask>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createElfImageRequestBuilder(String contentLanguage, File file, String clusterId, String name, String size, String description, String uploadTaskId) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createElfImage");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling createElfImage");
    }
    // verify the required parameter 'clusterId' is set
    if (clusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterId' when calling createElfImage");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createElfImage");
    }
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling createElfImage");
    }
    // verify the required parameter 'description' is set
    if (description == null) {
      throw new ApiException(400, "Missing the required parameter 'description' when calling createElfImage");
    }
    // verify the required parameter 'uploadTaskId' is set
    if (uploadTaskId == null) {
      throw new ApiException(400, "Missing the required parameter 'uploadTaskId' when calling createElfImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/upload-elf-image";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param elfImageDeletionParams  (required)
   * @return List&lt;WithTaskDeleteElfImage&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteElfImage> deleteElfImage(String contentLanguage, ElfImageDeletionParams elfImageDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteElfImage>> localVarResponse = deleteElfImageWithHttpInfo(contentLanguage, elfImageDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param elfImageDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteElfImage&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteElfImage>> deleteElfImageWithHttpInfo(String contentLanguage, ElfImageDeletionParams elfImageDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteElfImageRequestBuilder(contentLanguage, elfImageDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteElfImage", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteElfImage>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteElfImage>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteElfImageRequestBuilder(String contentLanguage, ElfImageDeletionParams elfImageDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteElfImage");
    }
    // verify the required parameter 'elfImageDeletionParams' is set
    if (elfImageDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'elfImageDeletionParams' when calling deleteElfImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-elf-image";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(elfImageDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getElfImagesRequestBody  (required)
   * @return List&lt;ElfImage&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ElfImage> getElfImages(String contentLanguage, GetElfImagesRequestBody getElfImagesRequestBody) throws ApiException {
    ApiResponse<List<ElfImage>> localVarResponse = getElfImagesWithHttpInfo(contentLanguage, getElfImagesRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getElfImagesRequestBody  (required)
   * @return ApiResponse&lt;List&lt;ElfImage&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ElfImage>> getElfImagesWithHttpInfo(String contentLanguage, GetElfImagesRequestBody getElfImagesRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getElfImagesRequestBuilder(contentLanguage, getElfImagesRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getElfImages", localVarResponse);
      }
      return new ApiResponse<List<ElfImage>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ElfImage>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getElfImagesRequestBuilder(String contentLanguage, GetElfImagesRequestBody getElfImagesRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getElfImages");
    }
    // verify the required parameter 'getElfImagesRequestBody' is set
    if (getElfImagesRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getElfImagesRequestBody' when calling getElfImages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-elf-images";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getElfImagesRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getElfImagesConnectionRequestBody  (required)
   * @return ElfImageConnection
   * @throws ApiException if fails to make API call
   */
  public ElfImageConnection getElfImagesConnection(String contentLanguage, GetElfImagesConnectionRequestBody getElfImagesConnectionRequestBody) throws ApiException {
    ApiResponse<ElfImageConnection> localVarResponse = getElfImagesConnectionWithHttpInfo(contentLanguage, getElfImagesConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getElfImagesConnectionRequestBody  (required)
   * @return ApiResponse&lt;ElfImageConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ElfImageConnection> getElfImagesConnectionWithHttpInfo(String contentLanguage, GetElfImagesConnectionRequestBody getElfImagesConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getElfImagesConnectionRequestBuilder(contentLanguage, getElfImagesConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getElfImagesConnection", localVarResponse);
      }
      return new ApiResponse<ElfImageConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ElfImageConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getElfImagesConnectionRequestBuilder(String contentLanguage, GetElfImagesConnectionRequestBody getElfImagesConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getElfImagesConnection");
    }
    // verify the required parameter 'getElfImagesConnectionRequestBody' is set
    if (getElfImagesConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getElfImagesConnectionRequestBody' when calling getElfImagesConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-elf-images-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getElfImagesConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param elfImageUpdationParams  (required)
   * @return List&lt;WithTaskElfImage&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskElfImage> updateElfImage(String contentLanguage, ElfImageUpdationParams elfImageUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskElfImage>> localVarResponse = updateElfImageWithHttpInfo(contentLanguage, elfImageUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param elfImageUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskElfImage&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskElfImage>> updateElfImageWithHttpInfo(String contentLanguage, ElfImageUpdationParams elfImageUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateElfImageRequestBuilder(contentLanguage, elfImageUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateElfImage", localVarResponse);
      }
      return new ApiResponse<List<WithTaskElfImage>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskElfImage>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateElfImageRequestBuilder(String contentLanguage, ElfImageUpdationParams elfImageUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateElfImage");
    }
    // verify the required parameter 'elfImageUpdationParams' is set
    if (elfImageUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'elfImageUpdationParams' when calling updateElfImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-elf-image";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(elfImageUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
