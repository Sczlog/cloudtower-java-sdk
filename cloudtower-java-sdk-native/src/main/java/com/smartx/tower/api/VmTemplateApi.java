/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetVmTemplatesConnectionRequestBody;
import com.smartx.tower.model.GetVmTemplatesRequestBody;
import com.smartx.tower.model.VmTemplate;
import com.smartx.tower.model.VmTemplateConnection;
import com.smartx.tower.model.VmTemplateCreationParams;
import com.smartx.tower.model.VmTemplateDeletionParams;
import com.smartx.tower.model.VmTemplateUpdationParams;
import com.smartx.tower.model.WithTaskDeleteVmTemplate;
import com.smartx.tower.model.WithTaskVmTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class VmTemplateApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public VmTemplateApi() {
    this(new ApiClient());
  }

  public VmTemplateApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateCreationParams  (required)
   * @return List&lt;WithTaskVmTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVmTemplate> cloneVmTemplateFromVm(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    ApiResponse<List<WithTaskVmTemplate>> localVarResponse = cloneVmTemplateFromVmWithHttpInfo(contentLanguage, vmTemplateCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVmTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVmTemplate>> cloneVmTemplateFromVmWithHttpInfo(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloneVmTemplateFromVmRequestBuilder(contentLanguage, vmTemplateCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("cloneVmTemplateFromVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVmTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVmTemplate>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloneVmTemplateFromVmRequestBuilder(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling cloneVmTemplateFromVm");
    }
    // verify the required parameter 'vmTemplateCreationParams' is set
    if (vmTemplateCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmTemplateCreationParams' when calling cloneVmTemplateFromVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/clone-vm-template-from-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmTemplateCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateCreationParams  (required)
   * @return List&lt;WithTaskVmTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVmTemplate> convertVmTemplateFromVm(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    ApiResponse<List<WithTaskVmTemplate>> localVarResponse = convertVmTemplateFromVmWithHttpInfo(contentLanguage, vmTemplateCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVmTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVmTemplate>> convertVmTemplateFromVmWithHttpInfo(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertVmTemplateFromVmRequestBuilder(contentLanguage, vmTemplateCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("convertVmTemplateFromVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVmTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVmTemplate>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertVmTemplateFromVmRequestBuilder(String contentLanguage, List<VmTemplateCreationParams> vmTemplateCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling convertVmTemplateFromVm");
    }
    // verify the required parameter 'vmTemplateCreationParams' is set
    if (vmTemplateCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmTemplateCreationParams' when calling convertVmTemplateFromVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert-vm-template-from-vm";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmTemplateCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateDeletionParams  (required)
   * @return List&lt;WithTaskDeleteVmTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteVmTemplate> deleteVmTemplateFromVm(String contentLanguage, VmTemplateDeletionParams vmTemplateDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteVmTemplate>> localVarResponse = deleteVmTemplateFromVmWithHttpInfo(contentLanguage, vmTemplateDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteVmTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteVmTemplate>> deleteVmTemplateFromVmWithHttpInfo(String contentLanguage, VmTemplateDeletionParams vmTemplateDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteVmTemplateFromVmRequestBuilder(contentLanguage, vmTemplateDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteVmTemplateFromVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteVmTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteVmTemplate>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteVmTemplateFromVmRequestBuilder(String contentLanguage, VmTemplateDeletionParams vmTemplateDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteVmTemplateFromVm");
    }
    // verify the required parameter 'vmTemplateDeletionParams' is set
    if (vmTemplateDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmTemplateDeletionParams' when calling deleteVmTemplateFromVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-vm-template";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmTemplateDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmTemplatesRequestBody  (required)
   * @return List&lt;VmTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VmTemplate> getVmTemplates(String contentLanguage, GetVmTemplatesRequestBody getVmTemplatesRequestBody) throws ApiException {
    ApiResponse<List<VmTemplate>> localVarResponse = getVmTemplatesWithHttpInfo(contentLanguage, getVmTemplatesRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmTemplatesRequestBody  (required)
   * @return ApiResponse&lt;List&lt;VmTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<VmTemplate>> getVmTemplatesWithHttpInfo(String contentLanguage, GetVmTemplatesRequestBody getVmTemplatesRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVmTemplatesRequestBuilder(contentLanguage, getVmTemplatesRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getVmTemplates", localVarResponse);
      }
      return new ApiResponse<List<VmTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<VmTemplate>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVmTemplatesRequestBuilder(String contentLanguage, GetVmTemplatesRequestBody getVmTemplatesRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getVmTemplates");
    }
    // verify the required parameter 'getVmTemplatesRequestBody' is set
    if (getVmTemplatesRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getVmTemplatesRequestBody' when calling getVmTemplates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-vm-templates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getVmTemplatesRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmTemplatesConnectionRequestBody  (required)
   * @return VmTemplateConnection
   * @throws ApiException if fails to make API call
   */
  public VmTemplateConnection getVmTemplatesConnection(String contentLanguage, GetVmTemplatesConnectionRequestBody getVmTemplatesConnectionRequestBody) throws ApiException {
    ApiResponse<VmTemplateConnection> localVarResponse = getVmTemplatesConnectionWithHttpInfo(contentLanguage, getVmTemplatesConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getVmTemplatesConnectionRequestBody  (required)
   * @return ApiResponse&lt;VmTemplateConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VmTemplateConnection> getVmTemplatesConnectionWithHttpInfo(String contentLanguage, GetVmTemplatesConnectionRequestBody getVmTemplatesConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVmTemplatesConnectionRequestBuilder(contentLanguage, getVmTemplatesConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getVmTemplatesConnection", localVarResponse);
      }
      return new ApiResponse<VmTemplateConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VmTemplateConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVmTemplatesConnectionRequestBuilder(String contentLanguage, GetVmTemplatesConnectionRequestBody getVmTemplatesConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getVmTemplatesConnection");
    }
    // verify the required parameter 'getVmTemplatesConnectionRequestBody' is set
    if (getVmTemplatesConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getVmTemplatesConnectionRequestBody' when calling getVmTemplatesConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-vm-templates-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getVmTemplatesConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateUpdationParams  (required)
   * @return List&lt;WithTaskVmTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskVmTemplate> updateVmTemplateFromVm(String contentLanguage, VmTemplateUpdationParams vmTemplateUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskVmTemplate>> localVarResponse = updateVmTemplateFromVmWithHttpInfo(contentLanguage, vmTemplateUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param vmTemplateUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskVmTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskVmTemplate>> updateVmTemplateFromVmWithHttpInfo(String contentLanguage, VmTemplateUpdationParams vmTemplateUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateVmTemplateFromVmRequestBuilder(contentLanguage, vmTemplateUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateVmTemplateFromVm", localVarResponse);
      }
      return new ApiResponse<List<WithTaskVmTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskVmTemplate>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateVmTemplateFromVmRequestBuilder(String contentLanguage, VmTemplateUpdationParams vmTemplateUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateVmTemplateFromVm");
    }
    // verify the required parameter 'vmTemplateUpdationParams' is set
    if (vmTemplateUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'vmTemplateUpdationParams' when calling updateVmTemplateFromVm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-vm-template";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(vmTemplateUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
