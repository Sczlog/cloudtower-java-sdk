/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetSnapshotPlansConnectionRequestBody;
import com.smartx.tower.model.GetSnapshotPlansRequestBody;
import com.smartx.tower.model.SnapshotPlan;
import com.smartx.tower.model.SnapshotPlanConnection;
import com.smartx.tower.model.SnapshotPlanCreationParams;
import com.smartx.tower.model.SnapshotPlanDeletionParams;
import com.smartx.tower.model.SnapshotPlanExecutionParams;
import com.smartx.tower.model.SnapshotPlanResumeParams;
import com.smartx.tower.model.SnapshotPlanSuspendedParams;
import com.smartx.tower.model.SnapshotPlanUpdationParams;
import com.smartx.tower.model.WithTaskDeleteSnapshotPlan;
import com.smartx.tower.model.WithTaskSnapshotPlan;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class SnapshotPlanApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SnapshotPlanApi() {
    this(new ApiClient());
  }

  public SnapshotPlanApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanCreationParams  (required)
   * @return List&lt;WithTaskSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnapshotPlan> createSnapshotPlan(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams) throws ApiException {
    ApiResponse<List<WithTaskSnapshotPlan>> localVarResponse = createSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnapshotPlan>> createSnapshotPlanWithHttpInfo(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSnapshotPlanRequestBuilder(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanCreationParams' is set
    if (snapshotPlanCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanCreationParams' when calling createSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanDeletionParams  (required)
   * @return List&lt;WithTaskDeleteSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteSnapshotPlan> deleteSnapshotPlan(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteSnapshotPlan>> localVarResponse = deleteSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteSnapshotPlan>> deleteSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSnapshotPlanRequestBuilder(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanDeletionParams' is set
    if (snapshotPlanDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanDeletionParams' when calling deleteSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanExecutionParams  (required)
   * @return List&lt;WithTaskSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnapshotPlan> executeSnapshotPlan(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams) throws ApiException {
    ApiResponse<List<WithTaskSnapshotPlan>> localVarResponse = executeSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanExecutionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanExecutionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnapshotPlan>> executeSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanExecutionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("executeSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeSnapshotPlanRequestBuilder(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling executeSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanExecutionParams' is set
    if (snapshotPlanExecutionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanExecutionParams' when calling executeSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/execute-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanExecutionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnapshotPlansRequestBody  (required)
   * @return List&lt;SnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<SnapshotPlan> getSnapshotPlans(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody) throws ApiException {
    ApiResponse<List<SnapshotPlan>> localVarResponse = getSnapshotPlansWithHttpInfo(contentLanguage, getSnapshotPlansRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnapshotPlansRequestBody  (required)
   * @return ApiResponse&lt;List&lt;SnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<SnapshotPlan>> getSnapshotPlansWithHttpInfo(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSnapshotPlansRequestBuilder(contentLanguage, getSnapshotPlansRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getSnapshotPlans", localVarResponse);
      }
      return new ApiResponse<List<SnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<SnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSnapshotPlansRequestBuilder(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getSnapshotPlans");
    }
    // verify the required parameter 'getSnapshotPlansRequestBody' is set
    if (getSnapshotPlansRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getSnapshotPlansRequestBody' when calling getSnapshotPlans");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-snapshot-plans";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getSnapshotPlansRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnapshotPlansConnectionRequestBody  (required)
   * @return SnapshotPlanConnection
   * @throws ApiException if fails to make API call
   */
  public SnapshotPlanConnection getSnapshotPlansConnection(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody) throws ApiException {
    ApiResponse<SnapshotPlanConnection> localVarResponse = getSnapshotPlansConnectionWithHttpInfo(contentLanguage, getSnapshotPlansConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getSnapshotPlansConnectionRequestBody  (required)
   * @return ApiResponse&lt;SnapshotPlanConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SnapshotPlanConnection> getSnapshotPlansConnectionWithHttpInfo(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSnapshotPlansConnectionRequestBuilder(contentLanguage, getSnapshotPlansConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getSnapshotPlansConnection", localVarResponse);
      }
      return new ApiResponse<SnapshotPlanConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SnapshotPlanConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSnapshotPlansConnectionRequestBuilder(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getSnapshotPlansConnection");
    }
    // verify the required parameter 'getSnapshotPlansConnectionRequestBody' is set
    if (getSnapshotPlansConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getSnapshotPlansConnectionRequestBody' when calling getSnapshotPlansConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-snapshot-plans-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getSnapshotPlansConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanResumeParams  (required)
   * @return List&lt;WithTaskSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnapshotPlan> resumeSnapshotPlan(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams) throws ApiException {
    ApiResponse<List<WithTaskSnapshotPlan>> localVarResponse = resumeSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanResumeParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanResumeParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnapshotPlan>> resumeSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resumeSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanResumeParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("resumeSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resumeSnapshotPlanRequestBuilder(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling resumeSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanResumeParams' is set
    if (snapshotPlanResumeParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanResumeParams' when calling resumeSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resume-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanResumeParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanSuspendedParams  (required)
   * @return List&lt;WithTaskSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnapshotPlan> suspendSnapshotPlan(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams) throws ApiException {
    ApiResponse<List<WithTaskSnapshotPlan>> localVarResponse = suspendSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanSuspendedParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanSuspendedParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnapshotPlan>> suspendSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = suspendSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanSuspendedParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("suspendSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder suspendSnapshotPlanRequestBuilder(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling suspendSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanSuspendedParams' is set
    if (snapshotPlanSuspendedParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanSuspendedParams' when calling suspendSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/suspend-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanSuspendedParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanUpdationParams  (required)
   * @return List&lt;WithTaskSnapshotPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskSnapshotPlan> updateSnapshotPlan(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskSnapshotPlan>> localVarResponse = updateSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param snapshotPlanUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskSnapshotPlan>> updateSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSnapshotPlanRequestBuilder(contentLanguage, snapshotPlanUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateSnapshotPlan", localVarResponse);
      }
      return new ApiResponse<List<WithTaskSnapshotPlan>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskSnapshotPlan>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSnapshotPlanRequestBuilder(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateSnapshotPlan");
    }
    // verify the required parameter 'snapshotPlanUpdationParams' is set
    if (snapshotPlanUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'snapshotPlanUpdationParams' when calling updateSnapshotPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-snapshot-plan";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(snapshotPlanUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
