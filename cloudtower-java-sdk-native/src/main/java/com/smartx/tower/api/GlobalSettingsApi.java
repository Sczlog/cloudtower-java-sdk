/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.ClusterRecycleBinCreationParams;
import com.smartx.tower.model.ClusterRecycleBinDeletionParams;
import com.smartx.tower.model.ClusterRecycleBinUpdationParams;
import com.smartx.tower.model.GetGlobalSettingsesConnectionRequestBody;
import com.smartx.tower.model.GetGlobalSettingsesRequestBody;
import com.smartx.tower.model.GlobalRecycleBinUpdationParams;
import com.smartx.tower.model.GlobalSettings;
import com.smartx.tower.model.GlobalSettingsConnection;
import com.smartx.tower.model.WithTaskClusterSettings;
import com.smartx.tower.model.WithTaskDeleteClusterRecycleBin;
import com.smartx.tower.model.WithTaskGlobalSettings;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class GlobalSettingsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public GlobalSettingsApi() {
    this(new ApiClient());
  }

  public GlobalSettingsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinCreationParams  (required)
   * @return List&lt;WithTaskClusterSettings&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskClusterSettings> createClusterRecycleBinSetting(String contentLanguage, ClusterRecycleBinCreationParams clusterRecycleBinCreationParams) throws ApiException {
    ApiResponse<List<WithTaskClusterSettings>> localVarResponse = createClusterRecycleBinSettingWithHttpInfo(contentLanguage, clusterRecycleBinCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskClusterSettings&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskClusterSettings>> createClusterRecycleBinSettingWithHttpInfo(String contentLanguage, ClusterRecycleBinCreationParams clusterRecycleBinCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createClusterRecycleBinSettingRequestBuilder(contentLanguage, clusterRecycleBinCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createClusterRecycleBinSetting", localVarResponse);
      }
      return new ApiResponse<List<WithTaskClusterSettings>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskClusterSettings>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createClusterRecycleBinSettingRequestBuilder(String contentLanguage, ClusterRecycleBinCreationParams clusterRecycleBinCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createClusterRecycleBinSetting");
    }
    // verify the required parameter 'clusterRecycleBinCreationParams' is set
    if (clusterRecycleBinCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterRecycleBinCreationParams' when calling createClusterRecycleBinSetting");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-cluster-recycle-bin-setting";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterRecycleBinCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinDeletionParams  (required)
   * @return List&lt;WithTaskDeleteClusterRecycleBin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteClusterRecycleBin> deleteClusterRecycleBinSetting(String contentLanguage, ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteClusterRecycleBin>> localVarResponse = deleteClusterRecycleBinSettingWithHttpInfo(contentLanguage, clusterRecycleBinDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteClusterRecycleBin&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteClusterRecycleBin>> deleteClusterRecycleBinSettingWithHttpInfo(String contentLanguage, ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteClusterRecycleBinSettingRequestBuilder(contentLanguage, clusterRecycleBinDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteClusterRecycleBinSetting", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteClusterRecycleBin>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteClusterRecycleBin>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteClusterRecycleBinSettingRequestBuilder(String contentLanguage, ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteClusterRecycleBinSetting");
    }
    // verify the required parameter 'clusterRecycleBinDeletionParams' is set
    if (clusterRecycleBinDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterRecycleBinDeletionParams' when calling deleteClusterRecycleBinSetting");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-cluster-recycle-bin-setting";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterRecycleBinDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getGlobalSettingsesRequestBody  (required)
   * @return List&lt;GlobalSettings&gt;
   * @throws ApiException if fails to make API call
   */
  public List<GlobalSettings> getGlobalSettingses(String contentLanguage, GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody) throws ApiException {
    ApiResponse<List<GlobalSettings>> localVarResponse = getGlobalSettingsesWithHttpInfo(contentLanguage, getGlobalSettingsesRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getGlobalSettingsesRequestBody  (required)
   * @return ApiResponse&lt;List&lt;GlobalSettings&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<GlobalSettings>> getGlobalSettingsesWithHttpInfo(String contentLanguage, GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalSettingsesRequestBuilder(contentLanguage, getGlobalSettingsesRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getGlobalSettingses", localVarResponse);
      }
      return new ApiResponse<List<GlobalSettings>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<GlobalSettings>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalSettingsesRequestBuilder(String contentLanguage, GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getGlobalSettingses");
    }
    // verify the required parameter 'getGlobalSettingsesRequestBody' is set
    if (getGlobalSettingsesRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getGlobalSettingsesRequestBody' when calling getGlobalSettingses");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-global-settingses";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getGlobalSettingsesRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getGlobalSettingsesConnectionRequestBody  (required)
   * @return GlobalSettingsConnection
   * @throws ApiException if fails to make API call
   */
  public GlobalSettingsConnection getGlobalSettingsesConnection(String contentLanguage, GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody) throws ApiException {
    ApiResponse<GlobalSettingsConnection> localVarResponse = getGlobalSettingsesConnectionWithHttpInfo(contentLanguage, getGlobalSettingsesConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getGlobalSettingsesConnectionRequestBody  (required)
   * @return ApiResponse&lt;GlobalSettingsConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GlobalSettingsConnection> getGlobalSettingsesConnectionWithHttpInfo(String contentLanguage, GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalSettingsesConnectionRequestBuilder(contentLanguage, getGlobalSettingsesConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getGlobalSettingsesConnection", localVarResponse);
      }
      return new ApiResponse<GlobalSettingsConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GlobalSettingsConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalSettingsesConnectionRequestBuilder(String contentLanguage, GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getGlobalSettingsesConnection");
    }
    // verify the required parameter 'getGlobalSettingsesConnectionRequestBody' is set
    if (getGlobalSettingsesConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getGlobalSettingsesConnectionRequestBody' when calling getGlobalSettingsesConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-global-settingses-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getGlobalSettingsesConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinUpdationParams  (required)
   * @return List&lt;WithTaskClusterSettings&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskClusterSettings> updateClusterRecycleBinSetting(String contentLanguage, ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskClusterSettings>> localVarResponse = updateClusterRecycleBinSettingWithHttpInfo(contentLanguage, clusterRecycleBinUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param clusterRecycleBinUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskClusterSettings&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskClusterSettings>> updateClusterRecycleBinSettingWithHttpInfo(String contentLanguage, ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateClusterRecycleBinSettingRequestBuilder(contentLanguage, clusterRecycleBinUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateClusterRecycleBinSetting", localVarResponse);
      }
      return new ApiResponse<List<WithTaskClusterSettings>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskClusterSettings>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateClusterRecycleBinSettingRequestBuilder(String contentLanguage, ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateClusterRecycleBinSetting");
    }
    // verify the required parameter 'clusterRecycleBinUpdationParams' is set
    if (clusterRecycleBinUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterRecycleBinUpdationParams' when calling updateClusterRecycleBinSetting");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-cluster-recycle-bin-setting";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterRecycleBinUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param globalRecycleBinUpdationParams  (required)
   * @return WithTaskGlobalSettings
   * @throws ApiException if fails to make API call
   */
  public WithTaskGlobalSettings updateGlobalRecycleBinSetting(String contentLanguage, GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams) throws ApiException {
    ApiResponse<WithTaskGlobalSettings> localVarResponse = updateGlobalRecycleBinSettingWithHttpInfo(contentLanguage, globalRecycleBinUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param globalRecycleBinUpdationParams  (required)
   * @return ApiResponse&lt;WithTaskGlobalSettings&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WithTaskGlobalSettings> updateGlobalRecycleBinSettingWithHttpInfo(String contentLanguage, GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateGlobalRecycleBinSettingRequestBuilder(contentLanguage, globalRecycleBinUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateGlobalRecycleBinSetting", localVarResponse);
      }
      return new ApiResponse<WithTaskGlobalSettings>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WithTaskGlobalSettings>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateGlobalRecycleBinSettingRequestBuilder(String contentLanguage, GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateGlobalRecycleBinSetting");
    }
    // verify the required parameter 'globalRecycleBinUpdationParams' is set
    if (globalRecycleBinUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'globalRecycleBinUpdationParams' when calling updateGlobalRecycleBinSetting");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-global-recycle-bin-setting";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(globalRecycleBinUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
