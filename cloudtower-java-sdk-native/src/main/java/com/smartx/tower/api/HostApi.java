/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetHostsConnectionRequestBody;
import com.smartx.tower.model.GetHostsRequestBody;
import com.smartx.tower.model.Host;
import com.smartx.tower.model.HostConnection;
import com.smartx.tower.model.HostCreationParams;
import com.smartx.tower.model.HostUpdationParams;
import com.smartx.tower.model.TriggerDiskBlinkParams;
import com.smartx.tower.model.WithTaskBatchHosts;
import com.smartx.tower.model.WithTaskHost;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class HostApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public HostApi() {
    this(new ApiClient());
  }

  public HostApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param hostCreationParams  (required)
   * @return List&lt;WithTaskBatchHosts&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskBatchHosts> createHost(String contentLanguage, List<HostCreationParams> hostCreationParams) throws ApiException {
    ApiResponse<List<WithTaskBatchHosts>> localVarResponse = createHostWithHttpInfo(contentLanguage, hostCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param hostCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskBatchHosts&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskBatchHosts>> createHostWithHttpInfo(String contentLanguage, List<HostCreationParams> hostCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createHostRequestBuilder(contentLanguage, hostCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createHost", localVarResponse);
      }
      return new ApiResponse<List<WithTaskBatchHosts>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskBatchHosts>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createHostRequestBuilder(String contentLanguage, List<HostCreationParams> hostCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createHost");
    }
    // verify the required parameter 'hostCreationParams' is set
    if (hostCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'hostCreationParams' when calling createHost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-host";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(hostCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getHostsRequestBody  (required)
   * @return List&lt;Host&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Host> getHosts(String contentLanguage, GetHostsRequestBody getHostsRequestBody) throws ApiException {
    ApiResponse<List<Host>> localVarResponse = getHostsWithHttpInfo(contentLanguage, getHostsRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getHostsRequestBody  (required)
   * @return ApiResponse&lt;List&lt;Host&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Host>> getHostsWithHttpInfo(String contentLanguage, GetHostsRequestBody getHostsRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getHostsRequestBuilder(contentLanguage, getHostsRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getHosts", localVarResponse);
      }
      return new ApiResponse<List<Host>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Host>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getHostsRequestBuilder(String contentLanguage, GetHostsRequestBody getHostsRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getHosts");
    }
    // verify the required parameter 'getHostsRequestBody' is set
    if (getHostsRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getHostsRequestBody' when calling getHosts");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-hosts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getHostsRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getHostsConnectionRequestBody  (required)
   * @return HostConnection
   * @throws ApiException if fails to make API call
   */
  public HostConnection getHostsConnection(String contentLanguage, GetHostsConnectionRequestBody getHostsConnectionRequestBody) throws ApiException {
    ApiResponse<HostConnection> localVarResponse = getHostsConnectionWithHttpInfo(contentLanguage, getHostsConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getHostsConnectionRequestBody  (required)
   * @return ApiResponse&lt;HostConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HostConnection> getHostsConnectionWithHttpInfo(String contentLanguage, GetHostsConnectionRequestBody getHostsConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getHostsConnectionRequestBuilder(contentLanguage, getHostsConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getHostsConnection", localVarResponse);
      }
      return new ApiResponse<HostConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HostConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getHostsConnectionRequestBuilder(String contentLanguage, GetHostsConnectionRequestBody getHostsConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getHostsConnection");
    }
    // verify the required parameter 'getHostsConnectionRequestBody' is set
    if (getHostsConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getHostsConnectionRequestBody' when calling getHostsConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-hosts-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getHostsConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param triggerDiskBlinkParams  (required)
   * @return List&lt;WithTaskHost&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskHost> triggerDiskBlink(String contentLanguage, List<TriggerDiskBlinkParams> triggerDiskBlinkParams) throws ApiException {
    ApiResponse<List<WithTaskHost>> localVarResponse = triggerDiskBlinkWithHttpInfo(contentLanguage, triggerDiskBlinkParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param triggerDiskBlinkParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskHost&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskHost>> triggerDiskBlinkWithHttpInfo(String contentLanguage, List<TriggerDiskBlinkParams> triggerDiskBlinkParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = triggerDiskBlinkRequestBuilder(contentLanguage, triggerDiskBlinkParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("triggerDiskBlink", localVarResponse);
      }
      return new ApiResponse<List<WithTaskHost>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskHost>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder triggerDiskBlinkRequestBuilder(String contentLanguage, List<TriggerDiskBlinkParams> triggerDiskBlinkParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling triggerDiskBlink");
    }
    // verify the required parameter 'triggerDiskBlinkParams' is set
    if (triggerDiskBlinkParams == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerDiskBlinkParams' when calling triggerDiskBlink");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/trigger-disk-blink";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(triggerDiskBlinkParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param hostUpdationParams  (required)
   * @return List&lt;WithTaskHost&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskHost> updateHost(String contentLanguage, HostUpdationParams hostUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskHost>> localVarResponse = updateHostWithHttpInfo(contentLanguage, hostUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param hostUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskHost&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskHost>> updateHostWithHttpInfo(String contentLanguage, HostUpdationParams hostUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateHostRequestBuilder(contentLanguage, hostUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateHost", localVarResponse);
      }
      return new ApiResponse<List<WithTaskHost>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskHost>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateHostRequestBuilder(String contentLanguage, HostUpdationParams hostUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateHost");
    }
    // verify the required parameter 'hostUpdationParams' is set
    if (hostUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'hostUpdationParams' when calling updateHost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-host";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(hostUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
