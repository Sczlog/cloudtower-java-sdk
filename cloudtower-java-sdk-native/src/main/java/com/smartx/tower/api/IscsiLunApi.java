/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.smartx.tower.api;

import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Pair;

import com.smartx.tower.model.GetIscsiLunsConnectionRequestBody;
import com.smartx.tower.model.GetIscsiLunsRequestBody;
import com.smartx.tower.model.IscsiLun;
import com.smartx.tower.model.IscsiLunCloneParams;
import com.smartx.tower.model.IscsiLunConnection;
import com.smartx.tower.model.IscsiLunCreationParams;
import com.smartx.tower.model.IscsiLunDeletionParams;
import com.smartx.tower.model.IscsiLunRollbackParams;
import com.smartx.tower.model.IscsiLunUpdationParams;
import com.smartx.tower.model.WithTaskDeleteIscsiLun;
import com.smartx.tower.model.WithTaskIscsiLun;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T15:59:14.939791800+08:00[Asia/Shanghai]")
public class IscsiLunApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public IscsiLunApi() {
    this(new ApiClient());
  }

  public IscsiLunApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunCloneParams  (required)
   * @return List&lt;WithTaskIscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskIscsiLun> cloneIscsiLunFromSnapshot(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams) throws ApiException {
    ApiResponse<List<WithTaskIscsiLun>> localVarResponse = cloneIscsiLunFromSnapshotWithHttpInfo(contentLanguage, iscsiLunCloneParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunCloneParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskIscsiLun>> cloneIscsiLunFromSnapshotWithHttpInfo(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloneIscsiLunFromSnapshotRequestBuilder(contentLanguage, iscsiLunCloneParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("cloneIscsiLunFromSnapshot", localVarResponse);
      }
      return new ApiResponse<List<WithTaskIscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskIscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloneIscsiLunFromSnapshotRequestBuilder(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling cloneIscsiLunFromSnapshot");
    }
    // verify the required parameter 'iscsiLunCloneParams' is set
    if (iscsiLunCloneParams == null) {
      throw new ApiException(400, "Missing the required parameter 'iscsiLunCloneParams' when calling cloneIscsiLunFromSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/clone-iscsi-lun-from-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iscsiLunCloneParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunCreationParams  (required)
   * @return List&lt;WithTaskIscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskIscsiLun> createIscsiLun(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams) throws ApiException {
    ApiResponse<List<WithTaskIscsiLun>> localVarResponse = createIscsiLunWithHttpInfo(contentLanguage, iscsiLunCreationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunCreationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskIscsiLun>> createIscsiLunWithHttpInfo(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createIscsiLunRequestBuilder(contentLanguage, iscsiLunCreationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createIscsiLun", localVarResponse);
      }
      return new ApiResponse<List<WithTaskIscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskIscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createIscsiLunRequestBuilder(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling createIscsiLun");
    }
    // verify the required parameter 'iscsiLunCreationParams' is set
    if (iscsiLunCreationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'iscsiLunCreationParams' when calling createIscsiLun");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/create-iscsi-lun";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iscsiLunCreationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunDeletionParams  (required)
   * @return List&lt;WithTaskDeleteIscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskDeleteIscsiLun> deleteIscsiLun(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams) throws ApiException {
    ApiResponse<List<WithTaskDeleteIscsiLun>> localVarResponse = deleteIscsiLunWithHttpInfo(contentLanguage, iscsiLunDeletionParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunDeletionParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskDeleteIscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskDeleteIscsiLun>> deleteIscsiLunWithHttpInfo(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteIscsiLunRequestBuilder(contentLanguage, iscsiLunDeletionParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteIscsiLun", localVarResponse);
      }
      return new ApiResponse<List<WithTaskDeleteIscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskDeleteIscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteIscsiLunRequestBuilder(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling deleteIscsiLun");
    }
    // verify the required parameter 'iscsiLunDeletionParams' is set
    if (iscsiLunDeletionParams == null) {
      throw new ApiException(400, "Missing the required parameter 'iscsiLunDeletionParams' when calling deleteIscsiLun");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delete-iscsi-lun";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iscsiLunDeletionParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getIscsiLunsRequestBody  (required)
   * @return List&lt;IscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IscsiLun> getIscsiLuns(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody) throws ApiException {
    ApiResponse<List<IscsiLun>> localVarResponse = getIscsiLunsWithHttpInfo(contentLanguage, getIscsiLunsRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getIscsiLunsRequestBody  (required)
   * @return ApiResponse&lt;List&lt;IscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<IscsiLun>> getIscsiLunsWithHttpInfo(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIscsiLunsRequestBuilder(contentLanguage, getIscsiLunsRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getIscsiLuns", localVarResponse);
      }
      return new ApiResponse<List<IscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<IscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIscsiLunsRequestBuilder(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getIscsiLuns");
    }
    // verify the required parameter 'getIscsiLunsRequestBody' is set
    if (getIscsiLunsRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getIscsiLunsRequestBody' when calling getIscsiLuns");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-iscsi-luns";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getIscsiLunsRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getIscsiLunsConnectionRequestBody  (required)
   * @return IscsiLunConnection
   * @throws ApiException if fails to make API call
   */
  public IscsiLunConnection getIscsiLunsConnection(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody) throws ApiException {
    ApiResponse<IscsiLunConnection> localVarResponse = getIscsiLunsConnectionWithHttpInfo(contentLanguage, getIscsiLunsConnectionRequestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param getIscsiLunsConnectionRequestBody  (required)
   * @return ApiResponse&lt;IscsiLunConnection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IscsiLunConnection> getIscsiLunsConnectionWithHttpInfo(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIscsiLunsConnectionRequestBuilder(contentLanguage, getIscsiLunsConnectionRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getIscsiLunsConnection", localVarResponse);
      }
      return new ApiResponse<IscsiLunConnection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IscsiLunConnection>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIscsiLunsConnectionRequestBuilder(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling getIscsiLunsConnection");
    }
    // verify the required parameter 'getIscsiLunsConnectionRequestBody' is set
    if (getIscsiLunsConnectionRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'getIscsiLunsConnectionRequestBody' when calling getIscsiLunsConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/get-iscsi-luns-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getIscsiLunsConnectionRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunRollbackParams  (required)
   * @return List&lt;WithTaskIscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskIscsiLun> rollbackIscsiLunFromSnapshot(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams) throws ApiException {
    ApiResponse<List<WithTaskIscsiLun>> localVarResponse = rollbackIscsiLunFromSnapshotWithHttpInfo(contentLanguage, iscsiLunRollbackParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunRollbackParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskIscsiLun>> rollbackIscsiLunFromSnapshotWithHttpInfo(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rollbackIscsiLunFromSnapshotRequestBuilder(contentLanguage, iscsiLunRollbackParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("rollbackIscsiLunFromSnapshot", localVarResponse);
      }
      return new ApiResponse<List<WithTaskIscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskIscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rollbackIscsiLunFromSnapshotRequestBuilder(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling rollbackIscsiLunFromSnapshot");
    }
    // verify the required parameter 'iscsiLunRollbackParams' is set
    if (iscsiLunRollbackParams == null) {
      throw new ApiException(400, "Missing the required parameter 'iscsiLunRollbackParams' when calling rollbackIscsiLunFromSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rollback-iscsi-lun-from-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iscsiLunRollbackParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunUpdationParams  (required)
   * @return List&lt;WithTaskIscsiLun&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WithTaskIscsiLun> updateIscsiLun(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams) throws ApiException {
    ApiResponse<List<WithTaskIscsiLun>> localVarResponse = updateIscsiLunWithHttpInfo(contentLanguage, iscsiLunUpdationParams);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param contentLanguage  (required)
   * @param iscsiLunUpdationParams  (required)
   * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<WithTaskIscsiLun>> updateIscsiLunWithHttpInfo(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIscsiLunRequestBuilder(contentLanguage, iscsiLunUpdationParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateIscsiLun", localVarResponse);
      }
      return new ApiResponse<List<WithTaskIscsiLun>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<WithTaskIscsiLun>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIscsiLunRequestBuilder(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams) throws ApiException {
    // verify the required parameter 'contentLanguage' is set
    if (contentLanguage == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLanguage' when calling updateIscsiLun");
    }
    // verify the required parameter 'iscsiLunUpdationParams' is set
    if (iscsiLunUpdationParams == null) {
      throw new ApiException(400, "Missing the required parameter 'iscsiLunUpdationParams' when calling updateIscsiLun");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/update-iscsi-lun";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentLanguage != null) {
      localVarRequestBuilder.header("content-language", contentLanguage.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iscsiLunUpdationParams);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
