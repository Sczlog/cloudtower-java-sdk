/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetSnapshotPlansConnectionRequestBody;
import com.smartx.tower.model.GetSnapshotPlansRequestBody;
import com.smartx.tower.model.SnapshotPlan;
import com.smartx.tower.model.SnapshotPlanConnection;
import com.smartx.tower.model.SnapshotPlanCreationParams;
import com.smartx.tower.model.SnapshotPlanDeletionParams;
import com.smartx.tower.model.SnapshotPlanExecutionParams;
import com.smartx.tower.model.SnapshotPlanResumeParams;
import com.smartx.tower.model.SnapshotPlanSuspendedParams;
import com.smartx.tower.model.SnapshotPlanUpdationParams;
import com.smartx.tower.model.WithTaskDeleteSnapshotPlan;
import com.smartx.tower.model.WithTaskSnapshotPlan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotPlanApi {
    private ApiClient localVarApiClient;

    public SnapshotPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotPlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotPlanCall(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanCreationParams;

        // create path and map variables
        String localVarPath = "/create-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSnapshotPlanValidateBeforeCall(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanCreationParams' is set
        if (snapshotPlanCreationParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanCreationParams' when calling createSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = createSnapshotPlanCall(contentLanguage, snapshotPlanCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanCreationParams  (required)
     * @return List&lt;WithTaskSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotPlan> createSnapshotPlan(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotPlan>> localVarResp = createSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotPlan>> createSnapshotPlanWithHttpInfo(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotPlanAsync(String contentLanguage, List<SnapshotPlanCreationParams> snapshotPlanCreationParams, final ApiCallback<List<WithTaskSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotPlanCall(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSnapshotPlanValidateBeforeCall(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanDeletionParams' is set
        if (snapshotPlanDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanDeletionParams' when calling deleteSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSnapshotPlanCall(contentLanguage, snapshotPlanDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanDeletionParams  (required)
     * @return List&lt;WithTaskDeleteSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteSnapshotPlan> deleteSnapshotPlan(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteSnapshotPlan>> localVarResp = deleteSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteSnapshotPlan>> deleteSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotPlanAsync(String contentLanguage, SnapshotPlanDeletionParams snapshotPlanDeletionParams, final ApiCallback<List<WithTaskDeleteSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanExecutionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSnapshotPlanCall(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanExecutionParams;

        // create path and map variables
        String localVarPath = "/execute-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeSnapshotPlanValidateBeforeCall(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling executeSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanExecutionParams' is set
        if (snapshotPlanExecutionParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanExecutionParams' when calling executeSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = executeSnapshotPlanCall(contentLanguage, snapshotPlanExecutionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanExecutionParams  (required)
     * @return List&lt;WithTaskSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotPlan> executeSnapshotPlan(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotPlan>> localVarResp = executeSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanExecutionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanExecutionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotPlan>> executeSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams) throws ApiException {
        okhttp3.Call localVarCall = executeSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanExecutionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanExecutionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSnapshotPlanAsync(String contentLanguage, SnapshotPlanExecutionParams snapshotPlanExecutionParams, final ApiCallback<List<WithTaskSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanExecutionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotPlans
     * @param contentLanguage  (required)
     * @param getSnapshotPlansRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotPlansCall(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getSnapshotPlansRequestBody;

        // create path and map variables
        String localVarPath = "/get-snapshot-plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotPlansValidateBeforeCall(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getSnapshotPlans(Async)");
        }
        
        // verify the required parameter 'getSnapshotPlansRequestBody' is set
        if (getSnapshotPlansRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getSnapshotPlansRequestBody' when calling getSnapshotPlans(Async)");
        }
        

        okhttp3.Call localVarCall = getSnapshotPlansCall(contentLanguage, getSnapshotPlansRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansRequestBody  (required)
     * @return List&lt;SnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SnapshotPlan> getSnapshotPlans(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody) throws ApiException {
        ApiResponse<List<SnapshotPlan>> localVarResp = getSnapshotPlansWithHttpInfo(contentLanguage, getSnapshotPlansRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansRequestBody  (required)
     * @return ApiResponse&lt;List&lt;SnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SnapshotPlan>> getSnapshotPlansWithHttpInfo(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotPlansValidateBeforeCall(contentLanguage, getSnapshotPlansRequestBody, null);
        Type localVarReturnType = new TypeToken<List<SnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotPlansAsync(String contentLanguage, GetSnapshotPlansRequestBody getSnapshotPlansRequestBody, final ApiCallback<List<SnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotPlansValidateBeforeCall(contentLanguage, getSnapshotPlansRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<SnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotPlansConnection
     * @param contentLanguage  (required)
     * @param getSnapshotPlansConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotPlansConnectionCall(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getSnapshotPlansConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-snapshot-plans-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotPlansConnectionValidateBeforeCall(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getSnapshotPlansConnection(Async)");
        }
        
        // verify the required parameter 'getSnapshotPlansConnectionRequestBody' is set
        if (getSnapshotPlansConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getSnapshotPlansConnectionRequestBody' when calling getSnapshotPlansConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getSnapshotPlansConnectionCall(contentLanguage, getSnapshotPlansConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansConnectionRequestBody  (required)
     * @return SnapshotPlanConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotPlanConnection getSnapshotPlansConnection(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody) throws ApiException {
        ApiResponse<SnapshotPlanConnection> localVarResp = getSnapshotPlansConnectionWithHttpInfo(contentLanguage, getSnapshotPlansConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansConnectionRequestBody  (required)
     * @return ApiResponse&lt;SnapshotPlanConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotPlanConnection> getSnapshotPlansConnectionWithHttpInfo(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotPlansConnectionValidateBeforeCall(contentLanguage, getSnapshotPlansConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<SnapshotPlanConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotPlansConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotPlansConnectionAsync(String contentLanguage, GetSnapshotPlansConnectionRequestBody getSnapshotPlansConnectionRequestBody, final ApiCallback<SnapshotPlanConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotPlansConnectionValidateBeforeCall(contentLanguage, getSnapshotPlansConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SnapshotPlanConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanResumeParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeSnapshotPlanCall(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanResumeParams;

        // create path and map variables
        String localVarPath = "/resume-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeSnapshotPlanValidateBeforeCall(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling resumeSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanResumeParams' is set
        if (snapshotPlanResumeParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanResumeParams' when calling resumeSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = resumeSnapshotPlanCall(contentLanguage, snapshotPlanResumeParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanResumeParams  (required)
     * @return List&lt;WithTaskSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotPlan> resumeSnapshotPlan(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotPlan>> localVarResp = resumeSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanResumeParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanResumeParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotPlan>> resumeSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams) throws ApiException {
        okhttp3.Call localVarCall = resumeSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanResumeParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanResumeParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeSnapshotPlanAsync(String contentLanguage, SnapshotPlanResumeParams snapshotPlanResumeParams, final ApiCallback<List<WithTaskSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanResumeParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanSuspendedParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendSnapshotPlanCall(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanSuspendedParams;

        // create path and map variables
        String localVarPath = "/suspend-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendSnapshotPlanValidateBeforeCall(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling suspendSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanSuspendedParams' is set
        if (snapshotPlanSuspendedParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanSuspendedParams' when calling suspendSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = suspendSnapshotPlanCall(contentLanguage, snapshotPlanSuspendedParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanSuspendedParams  (required)
     * @return List&lt;WithTaskSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotPlan> suspendSnapshotPlan(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotPlan>> localVarResp = suspendSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanSuspendedParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanSuspendedParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotPlan>> suspendSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams) throws ApiException {
        okhttp3.Call localVarCall = suspendSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanSuspendedParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanSuspendedParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendSnapshotPlanAsync(String contentLanguage, SnapshotPlanSuspendedParams snapshotPlanSuspendedParams, final ApiCallback<List<WithTaskSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanSuspendedParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSnapshotPlan
     * @param contentLanguage  (required)
     * @param snapshotPlanUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSnapshotPlanCall(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotPlanUpdationParams;

        // create path and map variables
        String localVarPath = "/update-snapshot-plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSnapshotPlanValidateBeforeCall(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateSnapshotPlan(Async)");
        }
        
        // verify the required parameter 'snapshotPlanUpdationParams' is set
        if (snapshotPlanUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotPlanUpdationParams' when calling updateSnapshotPlan(Async)");
        }
        

        okhttp3.Call localVarCall = updateSnapshotPlanCall(contentLanguage, snapshotPlanUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanUpdationParams  (required)
     * @return List&lt;WithTaskSnapshotPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotPlan> updateSnapshotPlan(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotPlan>> localVarResp = updateSnapshotPlanWithHttpInfo(contentLanguage, snapshotPlanUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotPlan>> updateSnapshotPlanWithHttpInfo(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotPlanUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSnapshotPlanAsync(String contentLanguage, SnapshotPlanUpdationParams snapshotPlanUpdationParams, final ApiCallback<List<WithTaskSnapshotPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSnapshotPlanValidateBeforeCall(contentLanguage, snapshotPlanUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
