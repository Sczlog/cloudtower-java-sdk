/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.ConvertVmTemplateToVmParams;
import com.smartx.tower.model.GetVmsConnectionRequestBody;
import com.smartx.tower.model.GetVmsRequestBody;
import com.smartx.tower.model.InlineResponse200;
import com.smartx.tower.model.InstallVmtoolsParams;
import com.smartx.tower.model.Vm;
import com.smartx.tower.model.VmAddCdRomParams;
import com.smartx.tower.model.VmAddDiskParams;
import com.smartx.tower.model.VmAddFolderParams;
import com.smartx.tower.model.VmAddNicParams;
import com.smartx.tower.model.VmCloneParams;
import com.smartx.tower.model.VmConnection;
import com.smartx.tower.model.VmCreateVmFromTemplateParams;
import com.smartx.tower.model.VmCreationParams;
import com.smartx.tower.model.VmMigrateParams;
import com.smartx.tower.model.VmOperateParams;
import com.smartx.tower.model.VmRebuildParams;
import com.smartx.tower.model.VmRemoveCdRomParams;
import com.smartx.tower.model.VmRemoveDiskParams;
import com.smartx.tower.model.VmRemoveNicParams;
import com.smartx.tower.model.VmRollbackParams;
import com.smartx.tower.model.VmStartParams;
import com.smartx.tower.model.VmUpdateDiskParams;
import com.smartx.tower.model.VmUpdateNicParams;
import com.smartx.tower.model.VmUpdateParams;
import com.smartx.tower.model.WithTaskVm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VmApi {
    private ApiClient localVarApiClient;

    public VmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VmApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addVmCdRom
     * @param contentLanguage  (required)
     * @param vmAddCdRomParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmCdRomCall(String contentLanguage, VmAddCdRomParams vmAddCdRomParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmAddCdRomParams;

        // create path and map variables
        String localVarPath = "/add-vm-cd-rom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmCdRomValidateBeforeCall(String contentLanguage, VmAddCdRomParams vmAddCdRomParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling addVmCdRom(Async)");
        }
        
        // verify the required parameter 'vmAddCdRomParams' is set
        if (vmAddCdRomParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddCdRomParams' when calling addVmCdRom(Async)");
        }
        

        okhttp3.Call localVarCall = addVmCdRomCall(contentLanguage, vmAddCdRomParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddCdRomParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmCdRom(String contentLanguage, VmAddCdRomParams vmAddCdRomParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmCdRomWithHttpInfo(contentLanguage, vmAddCdRomParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddCdRomParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmCdRomWithHttpInfo(String contentLanguage, VmAddCdRomParams vmAddCdRomParams) throws ApiException {
        okhttp3.Call localVarCall = addVmCdRomValidateBeforeCall(contentLanguage, vmAddCdRomParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmAddCdRomParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmCdRomAsync(String contentLanguage, VmAddCdRomParams vmAddCdRomParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmCdRomValidateBeforeCall(contentLanguage, vmAddCdRomParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmDisk
     * @param contentLanguage  (required)
     * @param vmAddDiskParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmDiskCall(String contentLanguage, VmAddDiskParams vmAddDiskParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmAddDiskParams;

        // create path and map variables
        String localVarPath = "/add-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmDiskValidateBeforeCall(String contentLanguage, VmAddDiskParams vmAddDiskParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling addVmDisk(Async)");
        }
        
        // verify the required parameter 'vmAddDiskParams' is set
        if (vmAddDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddDiskParams' when calling addVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = addVmDiskCall(contentLanguage, vmAddDiskParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddDiskParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmDisk(String contentLanguage, VmAddDiskParams vmAddDiskParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmDiskWithHttpInfo(contentLanguage, vmAddDiskParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddDiskParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmDiskWithHttpInfo(String contentLanguage, VmAddDiskParams vmAddDiskParams) throws ApiException {
        okhttp3.Call localVarCall = addVmDiskValidateBeforeCall(contentLanguage, vmAddDiskParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmAddDiskParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmDiskAsync(String contentLanguage, VmAddDiskParams vmAddDiskParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmDiskValidateBeforeCall(contentLanguage, vmAddDiskParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmNic
     * @param contentLanguage  (required)
     * @param vmAddNicParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmNicCall(String contentLanguage, VmAddNicParams vmAddNicParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmAddNicParams;

        // create path and map variables
        String localVarPath = "/add-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmNicValidateBeforeCall(String contentLanguage, VmAddNicParams vmAddNicParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling addVmNic(Async)");
        }
        
        // verify the required parameter 'vmAddNicParams' is set
        if (vmAddNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddNicParams' when calling addVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = addVmNicCall(contentLanguage, vmAddNicParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddNicParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmNic(String contentLanguage, VmAddNicParams vmAddNicParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmNicWithHttpInfo(contentLanguage, vmAddNicParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddNicParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmNicWithHttpInfo(String contentLanguage, VmAddNicParams vmAddNicParams) throws ApiException {
        okhttp3.Call localVarCall = addVmNicValidateBeforeCall(contentLanguage, vmAddNicParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmAddNicParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmNicAsync(String contentLanguage, VmAddNicParams vmAddNicParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmNicValidateBeforeCall(contentLanguage, vmAddNicParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmToFolder
     * @param contentLanguage  (required)
     * @param vmAddFolderParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmToFolderCall(String contentLanguage, VmAddFolderParams vmAddFolderParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmAddFolderParams;

        // create path and map variables
        String localVarPath = "/add-vm-to-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmToFolderValidateBeforeCall(String contentLanguage, VmAddFolderParams vmAddFolderParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling addVmToFolder(Async)");
        }
        
        // verify the required parameter 'vmAddFolderParams' is set
        if (vmAddFolderParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddFolderParams' when calling addVmToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = addVmToFolderCall(contentLanguage, vmAddFolderParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddFolderParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmToFolder(String contentLanguage, VmAddFolderParams vmAddFolderParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmToFolderWithHttpInfo(contentLanguage, vmAddFolderParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmAddFolderParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmToFolderWithHttpInfo(String contentLanguage, VmAddFolderParams vmAddFolderParams) throws ApiException {
        okhttp3.Call localVarCall = addVmToFolderValidateBeforeCall(contentLanguage, vmAddFolderParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmAddFolderParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmToFolderAsync(String contentLanguage, VmAddFolderParams vmAddFolderParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmToFolderValidateBeforeCall(contentLanguage, vmAddFolderParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneVm
     * @param contentLanguage  (required)
     * @param vmCloneParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneVmCall(String contentLanguage, List<VmCloneParams> vmCloneParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmCloneParams;

        // create path and map variables
        String localVarPath = "/clone-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneVmValidateBeforeCall(String contentLanguage, List<VmCloneParams> vmCloneParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling cloneVm(Async)");
        }
        
        // verify the required parameter 'vmCloneParams' is set
        if (vmCloneParams == null) {
            throw new ApiException("Missing the required parameter 'vmCloneParams' when calling cloneVm(Async)");
        }
        

        okhttp3.Call localVarCall = cloneVmCall(contentLanguage, vmCloneParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCloneParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> cloneVm(String contentLanguage, List<VmCloneParams> vmCloneParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = cloneVmWithHttpInfo(contentLanguage, vmCloneParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCloneParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> cloneVmWithHttpInfo(String contentLanguage, List<VmCloneParams> vmCloneParams) throws ApiException {
        okhttp3.Call localVarCall = cloneVmValidateBeforeCall(contentLanguage, vmCloneParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmCloneParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneVmAsync(String contentLanguage, List<VmCloneParams> vmCloneParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneVmValidateBeforeCall(contentLanguage, vmCloneParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertVmTemplateToVm
     * @param contentLanguage  (required)
     * @param convertVmTemplateToVmParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVmTemplateToVmCall(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertVmTemplateToVmParams;

        // create path and map variables
        String localVarPath = "/convert-vm-template-to-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertVmTemplateToVmValidateBeforeCall(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling convertVmTemplateToVm(Async)");
        }
        
        // verify the required parameter 'convertVmTemplateToVmParams' is set
        if (convertVmTemplateToVmParams == null) {
            throw new ApiException("Missing the required parameter 'convertVmTemplateToVmParams' when calling convertVmTemplateToVm(Async)");
        }
        

        okhttp3.Call localVarCall = convertVmTemplateToVmCall(contentLanguage, convertVmTemplateToVmParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param convertVmTemplateToVmParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> convertVmTemplateToVm(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = convertVmTemplateToVmWithHttpInfo(contentLanguage, convertVmTemplateToVmParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param convertVmTemplateToVmParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> convertVmTemplateToVmWithHttpInfo(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams) throws ApiException {
        okhttp3.Call localVarCall = convertVmTemplateToVmValidateBeforeCall(contentLanguage, convertVmTemplateToVmParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param convertVmTemplateToVmParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVmTemplateToVmAsync(String contentLanguage, List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertVmTemplateToVmValidateBeforeCall(contentLanguage, convertVmTemplateToVmParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVm
     * @param contentLanguage  (required)
     * @param vmCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmCall(String contentLanguage, List<VmCreationParams> vmCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmCreationParams;

        // create path and map variables
        String localVarPath = "/create-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmValidateBeforeCall(String contentLanguage, List<VmCreationParams> vmCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createVm(Async)");
        }
        
        // verify the required parameter 'vmCreationParams' is set
        if (vmCreationParams == null) {
            throw new ApiException("Missing the required parameter 'vmCreationParams' when calling createVm(Async)");
        }
        

        okhttp3.Call localVarCall = createVmCall(contentLanguage, vmCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCreationParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> createVm(String contentLanguage, List<VmCreationParams> vmCreationParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = createVmWithHttpInfo(contentLanguage, vmCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> createVmWithHttpInfo(String contentLanguage, List<VmCreationParams> vmCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createVmValidateBeforeCall(contentLanguage, vmCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmAsync(String contentLanguage, List<VmCreationParams> vmCreationParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmValidateBeforeCall(contentLanguage, vmCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVmFromTemplate
     * @param contentLanguage  (required)
     * @param vmCreateVmFromTemplateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmFromTemplateCall(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmCreateVmFromTemplateParams;

        // create path and map variables
        String localVarPath = "/create-vm-from-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmFromTemplateValidateBeforeCall(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createVmFromTemplate(Async)");
        }
        
        // verify the required parameter 'vmCreateVmFromTemplateParams' is set
        if (vmCreateVmFromTemplateParams == null) {
            throw new ApiException("Missing the required parameter 'vmCreateVmFromTemplateParams' when calling createVmFromTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = createVmFromTemplateCall(contentLanguage, vmCreateVmFromTemplateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCreateVmFromTemplateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> createVmFromTemplate(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = createVmFromTemplateWithHttpInfo(contentLanguage, vmCreateVmFromTemplateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmCreateVmFromTemplateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> createVmFromTemplateWithHttpInfo(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams) throws ApiException {
        okhttp3.Call localVarCall = createVmFromTemplateValidateBeforeCall(contentLanguage, vmCreateVmFromTemplateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmCreateVmFromTemplateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmFromTemplateAsync(String contentLanguage, List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmFromTemplateValidateBeforeCall(contentLanguage, vmCreateVmFromTemplateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/delete-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling deleteVm(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse200> deleteVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<InlineResponse200>> localVarResp = deleteVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse200>> deleteVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = deleteVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<InlineResponse200>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceRestartVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceRestartVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/force-restart-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceRestartVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling forceRestartVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling forceRestartVm(Async)");
        }
        

        okhttp3.Call localVarCall = forceRestartVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> forceRestartVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = forceRestartVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> forceRestartVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = forceRestartVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceRestartVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceRestartVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceShutDownVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceShutDownVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/poweroff-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceShutDownVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling forceShutDownVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling forceShutDownVm(Async)");
        }
        

        okhttp3.Call localVarCall = forceShutDownVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> forceShutDownVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = forceShutDownVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> forceShutDownVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = forceShutDownVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceShutDownVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceShutDownVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVms
     * @param contentLanguage  (required)
     * @param getVmsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsCall(String contentLanguage, GetVmsRequestBody getVmsRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getVmsRequestBody;

        // create path and map variables
        String localVarPath = "/get-vms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmsValidateBeforeCall(String contentLanguage, GetVmsRequestBody getVmsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getVms(Async)");
        }
        
        // verify the required parameter 'getVmsRequestBody' is set
        if (getVmsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmsRequestBody' when calling getVms(Async)");
        }
        

        okhttp3.Call localVarCall = getVmsCall(contentLanguage, getVmsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVmsRequestBody  (required)
     * @return List&lt;Vm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Vm> getVms(String contentLanguage, GetVmsRequestBody getVmsRequestBody) throws ApiException {
        ApiResponse<List<Vm>> localVarResp = getVmsWithHttpInfo(contentLanguage, getVmsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVmsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;Vm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vm>> getVmsWithHttpInfo(String contentLanguage, GetVmsRequestBody getVmsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVmsValidateBeforeCall(contentLanguage, getVmsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<Vm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getVmsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsAsync(String contentLanguage, GetVmsRequestBody getVmsRequestBody, final ApiCallback<List<Vm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmsValidateBeforeCall(contentLanguage, getVmsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Vm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVmsConnection
     * @param contentLanguage  (required)
     * @param getVmsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsConnectionCall(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getVmsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-vms-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmsConnectionValidateBeforeCall(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getVmsConnection(Async)");
        }
        
        // verify the required parameter 'getVmsConnectionRequestBody' is set
        if (getVmsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmsConnectionRequestBody' when calling getVmsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getVmsConnectionCall(contentLanguage, getVmsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVmsConnectionRequestBody  (required)
     * @return VmConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VmConnection getVmsConnection(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody) throws ApiException {
        ApiResponse<VmConnection> localVarResp = getVmsConnectionWithHttpInfo(contentLanguage, getVmsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVmsConnectionRequestBody  (required)
     * @return ApiResponse&lt;VmConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VmConnection> getVmsConnectionWithHttpInfo(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVmsConnectionValidateBeforeCall(contentLanguage, getVmsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<VmConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getVmsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsConnectionAsync(String contentLanguage, GetVmsConnectionRequestBody getVmsConnectionRequestBody, final ApiCallback<VmConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmsConnectionValidateBeforeCall(contentLanguage, getVmsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<VmConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for installVmtools
     * @param contentLanguage  (required)
     * @param installVmtoolsParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installVmtoolsCall(String contentLanguage, InstallVmtoolsParams installVmtoolsParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = installVmtoolsParams;

        // create path and map variables
        String localVarPath = "/install-vmtools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installVmtoolsValidateBeforeCall(String contentLanguage, InstallVmtoolsParams installVmtoolsParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling installVmtools(Async)");
        }
        
        // verify the required parameter 'installVmtoolsParams' is set
        if (installVmtoolsParams == null) {
            throw new ApiException("Missing the required parameter 'installVmtoolsParams' when calling installVmtools(Async)");
        }
        

        okhttp3.Call localVarCall = installVmtoolsCall(contentLanguage, installVmtoolsParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param installVmtoolsParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> installVmtools(String contentLanguage, InstallVmtoolsParams installVmtoolsParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = installVmtoolsWithHttpInfo(contentLanguage, installVmtoolsParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param installVmtoolsParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> installVmtoolsWithHttpInfo(String contentLanguage, InstallVmtoolsParams installVmtoolsParams) throws ApiException {
        okhttp3.Call localVarCall = installVmtoolsValidateBeforeCall(contentLanguage, installVmtoolsParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param installVmtoolsParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installVmtoolsAsync(String contentLanguage, InstallVmtoolsParams installVmtoolsParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = installVmtoolsValidateBeforeCall(contentLanguage, installVmtoolsParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migRateVm
     * @param contentLanguage  (required)
     * @param vmMigrateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migRateVmCall(String contentLanguage, VmMigrateParams vmMigrateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmMigrateParams;

        // create path and map variables
        String localVarPath = "/migrate-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migRateVmValidateBeforeCall(String contentLanguage, VmMigrateParams vmMigrateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling migRateVm(Async)");
        }
        
        // verify the required parameter 'vmMigrateParams' is set
        if (vmMigrateParams == null) {
            throw new ApiException("Missing the required parameter 'vmMigrateParams' when calling migRateVm(Async)");
        }
        

        okhttp3.Call localVarCall = migRateVmCall(contentLanguage, vmMigrateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmMigrateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> migRateVm(String contentLanguage, VmMigrateParams vmMigrateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = migRateVmWithHttpInfo(contentLanguage, vmMigrateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmMigrateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> migRateVmWithHttpInfo(String contentLanguage, VmMigrateParams vmMigrateParams) throws ApiException {
        okhttp3.Call localVarCall = migRateVmValidateBeforeCall(contentLanguage, vmMigrateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmMigrateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migRateVmAsync(String contentLanguage, VmMigrateParams vmMigrateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migRateVmValidateBeforeCall(contentLanguage, vmMigrateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveVmToRecycleBin
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveVmToRecycleBinCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/move-vm-to-recycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveVmToRecycleBinValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling moveVmToRecycleBin(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling moveVmToRecycleBin(Async)");
        }
        

        okhttp3.Call localVarCall = moveVmToRecycleBinCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse200> moveVmToRecycleBin(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<InlineResponse200>> localVarResp = moveVmToRecycleBinWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse200>> moveVmToRecycleBinWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = moveVmToRecycleBinValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveVmToRecycleBinAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<InlineResponse200>> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveVmToRecycleBinValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rebuildVm
     * @param contentLanguage  (required)
     * @param vmRebuildParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebuildVmCall(String contentLanguage, List<VmRebuildParams> vmRebuildParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmRebuildParams;

        // create path and map variables
        String localVarPath = "/rebuild-vm-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebuildVmValidateBeforeCall(String contentLanguage, List<VmRebuildParams> vmRebuildParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling rebuildVm(Async)");
        }
        
        // verify the required parameter 'vmRebuildParams' is set
        if (vmRebuildParams == null) {
            throw new ApiException("Missing the required parameter 'vmRebuildParams' when calling rebuildVm(Async)");
        }
        

        okhttp3.Call localVarCall = rebuildVmCall(contentLanguage, vmRebuildParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRebuildParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> rebuildVm(String contentLanguage, List<VmRebuildParams> vmRebuildParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = rebuildVmWithHttpInfo(contentLanguage, vmRebuildParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRebuildParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> rebuildVmWithHttpInfo(String contentLanguage, List<VmRebuildParams> vmRebuildParams) throws ApiException {
        okhttp3.Call localVarCall = rebuildVmValidateBeforeCall(contentLanguage, vmRebuildParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmRebuildParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebuildVmAsync(String contentLanguage, List<VmRebuildParams> vmRebuildParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rebuildVmValidateBeforeCall(contentLanguage, vmRebuildParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverVmFromRecycleBin
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverVmFromRecycleBinCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/recover-vm-from-recycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverVmFromRecycleBinValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling recoverVmFromRecycleBin(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling recoverVmFromRecycleBin(Async)");
        }
        

        okhttp3.Call localVarCall = recoverVmFromRecycleBinCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse200> recoverVmFromRecycleBin(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<InlineResponse200>> localVarResp = recoverVmFromRecycleBinWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse200>> recoverVmFromRecycleBinWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = recoverVmFromRecycleBinValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverVmFromRecycleBinAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<InlineResponse200>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverVmFromRecycleBinValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmCdRom
     * @param contentLanguage  (required)
     * @param vmRemoveCdRomParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmCdRomCall(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmRemoveCdRomParams;

        // create path and map variables
        String localVarPath = "/remove-vm-cd-rom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmCdRomValidateBeforeCall(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling removeVmCdRom(Async)");
        }
        
        // verify the required parameter 'vmRemoveCdRomParams' is set
        if (vmRemoveCdRomParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveCdRomParams' when calling removeVmCdRom(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmCdRomCall(contentLanguage, vmRemoveCdRomParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveCdRomParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmCdRom(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmCdRomWithHttpInfo(contentLanguage, vmRemoveCdRomParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveCdRomParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmCdRomWithHttpInfo(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams) throws ApiException {
        okhttp3.Call localVarCall = removeVmCdRomValidateBeforeCall(contentLanguage, vmRemoveCdRomParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveCdRomParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmCdRomAsync(String contentLanguage, VmRemoveCdRomParams vmRemoveCdRomParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmCdRomValidateBeforeCall(contentLanguage, vmRemoveCdRomParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmDisk
     * @param contentLanguage  (required)
     * @param vmRemoveDiskParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmDiskCall(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmRemoveDiskParams;

        // create path and map variables
        String localVarPath = "/remove-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmDiskValidateBeforeCall(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling removeVmDisk(Async)");
        }
        
        // verify the required parameter 'vmRemoveDiskParams' is set
        if (vmRemoveDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveDiskParams' when calling removeVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmDiskCall(contentLanguage, vmRemoveDiskParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveDiskParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmDisk(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmDiskWithHttpInfo(contentLanguage, vmRemoveDiskParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveDiskParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmDiskWithHttpInfo(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams) throws ApiException {
        okhttp3.Call localVarCall = removeVmDiskValidateBeforeCall(contentLanguage, vmRemoveDiskParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveDiskParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmDiskAsync(String contentLanguage, VmRemoveDiskParams vmRemoveDiskParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmDiskValidateBeforeCall(contentLanguage, vmRemoveDiskParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmNic
     * @param contentLanguage  (required)
     * @param vmRemoveNicParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmNicCall(String contentLanguage, VmRemoveNicParams vmRemoveNicParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmRemoveNicParams;

        // create path and map variables
        String localVarPath = "/remove-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmNicValidateBeforeCall(String contentLanguage, VmRemoveNicParams vmRemoveNicParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling removeVmNic(Async)");
        }
        
        // verify the required parameter 'vmRemoveNicParams' is set
        if (vmRemoveNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveNicParams' when calling removeVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmNicCall(contentLanguage, vmRemoveNicParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveNicParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmNic(String contentLanguage, VmRemoveNicParams vmRemoveNicParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmNicWithHttpInfo(contentLanguage, vmRemoveNicParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveNicParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmNicWithHttpInfo(String contentLanguage, VmRemoveNicParams vmRemoveNicParams) throws ApiException {
        okhttp3.Call localVarCall = removeVmNicValidateBeforeCall(contentLanguage, vmRemoveNicParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmRemoveNicParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmNicAsync(String contentLanguage, VmRemoveNicParams vmRemoveNicParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmNicValidateBeforeCall(contentLanguage, vmRemoveNicParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmToFolder
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmToFolderCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/remove-vm-from-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmToFolderValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling removeVmToFolder(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling removeVmToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmToFolderCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmToFolder(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmToFolderWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmToFolderWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = removeVmToFolderValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmToFolderAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmToFolderValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/restart-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling restartVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling restartVm(Async)");
        }
        

        okhttp3.Call localVarCall = restartVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> restartVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = restartVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> restartVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = restartVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/resume-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling resumeVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling resumeVm(Async)");
        }
        

        okhttp3.Call localVarCall = resumeVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> resumeVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = resumeVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> resumeVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = resumeVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackVm
     * @param contentLanguage  (required)
     * @param vmRollbackParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackVmCall(String contentLanguage, VmRollbackParams vmRollbackParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmRollbackParams;

        // create path and map variables
        String localVarPath = "/rollback-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackVmValidateBeforeCall(String contentLanguage, VmRollbackParams vmRollbackParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling rollbackVm(Async)");
        }
        
        // verify the required parameter 'vmRollbackParams' is set
        if (vmRollbackParams == null) {
            throw new ApiException("Missing the required parameter 'vmRollbackParams' when calling rollbackVm(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackVmCall(contentLanguage, vmRollbackParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRollbackParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> rollbackVm(String contentLanguage, VmRollbackParams vmRollbackParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = rollbackVmWithHttpInfo(contentLanguage, vmRollbackParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmRollbackParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> rollbackVmWithHttpInfo(String contentLanguage, VmRollbackParams vmRollbackParams) throws ApiException {
        okhttp3.Call localVarCall = rollbackVmValidateBeforeCall(contentLanguage, vmRollbackParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmRollbackParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackVmAsync(String contentLanguage, VmRollbackParams vmRollbackParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackVmValidateBeforeCall(contentLanguage, vmRollbackParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shutDownVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shutDownVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/shutdown-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shutDownVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling shutDownVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling shutDownVm(Async)");
        }
        

        okhttp3.Call localVarCall = shutDownVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> shutDownVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = shutDownVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> shutDownVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = shutDownVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shutDownVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shutDownVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startVm
     * @param contentLanguage  (required)
     * @param vmStartParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVmCall(String contentLanguage, VmStartParams vmStartParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmStartParams;

        // create path and map variables
        String localVarPath = "/start-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startVmValidateBeforeCall(String contentLanguage, VmStartParams vmStartParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling startVm(Async)");
        }
        
        // verify the required parameter 'vmStartParams' is set
        if (vmStartParams == null) {
            throw new ApiException("Missing the required parameter 'vmStartParams' when calling startVm(Async)");
        }
        

        okhttp3.Call localVarCall = startVmCall(contentLanguage, vmStartParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmStartParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> startVm(String contentLanguage, VmStartParams vmStartParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = startVmWithHttpInfo(contentLanguage, vmStartParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmStartParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> startVmWithHttpInfo(String contentLanguage, VmStartParams vmStartParams) throws ApiException {
        okhttp3.Call localVarCall = startVmValidateBeforeCall(contentLanguage, vmStartParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmStartParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVmAsync(String contentLanguage, VmStartParams vmStartParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = startVmValidateBeforeCall(contentLanguage, vmStartParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendVm
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendVmCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/suspend-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendVmValidateBeforeCall(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling suspendVm(Async)");
        }
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling suspendVm(Async)");
        }
        

        okhttp3.Call localVarCall = suspendVmCall(contentLanguage, vmOperateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> suspendVm(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = suspendVmWithHttpInfo(contentLanguage, vmOperateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> suspendVmWithHttpInfo(String contentLanguage, VmOperateParams vmOperateParams) throws ApiException {
        okhttp3.Call localVarCall = suspendVmValidateBeforeCall(contentLanguage, vmOperateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmOperateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendVmAsync(String contentLanguage, VmOperateParams vmOperateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendVmValidateBeforeCall(contentLanguage, vmOperateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVm
     * @param contentLanguage  (required)
     * @param vmUpdateParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmCall(String contentLanguage, VmUpdateParams vmUpdateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmUpdateParams;

        // create path and map variables
        String localVarPath = "/update-vm-basic-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmValidateBeforeCall(String contentLanguage, VmUpdateParams vmUpdateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateVm(Async)");
        }
        
        // verify the required parameter 'vmUpdateParams' is set
        if (vmUpdateParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateParams' when calling updateVm(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmCall(contentLanguage, vmUpdateParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVm(String contentLanguage, VmUpdateParams vmUpdateParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmWithHttpInfo(contentLanguage, vmUpdateParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmWithHttpInfo(String contentLanguage, VmUpdateParams vmUpdateParams) throws ApiException {
        okhttp3.Call localVarCall = updateVmValidateBeforeCall(contentLanguage, vmUpdateParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmAsync(String contentLanguage, VmUpdateParams vmUpdateParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmValidateBeforeCall(contentLanguage, vmUpdateParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVmDisk
     * @param contentLanguage  (required)
     * @param vmUpdateDiskParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmDiskCall(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmUpdateDiskParams;

        // create path and map variables
        String localVarPath = "/update-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmDiskValidateBeforeCall(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateVmDisk(Async)");
        }
        
        // verify the required parameter 'vmUpdateDiskParams' is set
        if (vmUpdateDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateDiskParams' when calling updateVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmDiskCall(contentLanguage, vmUpdateDiskParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateDiskParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVmDisk(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmDiskWithHttpInfo(contentLanguage, vmUpdateDiskParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateDiskParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmDiskWithHttpInfo(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams) throws ApiException {
        okhttp3.Call localVarCall = updateVmDiskValidateBeforeCall(contentLanguage, vmUpdateDiskParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateDiskParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmDiskAsync(String contentLanguage, VmUpdateDiskParams vmUpdateDiskParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmDiskValidateBeforeCall(contentLanguage, vmUpdateDiskParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVmNic
     * @param contentLanguage  (required)
     * @param vmUpdateNicParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmNicCall(String contentLanguage, VmUpdateNicParams vmUpdateNicParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmUpdateNicParams;

        // create path and map variables
        String localVarPath = "/update-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmNicValidateBeforeCall(String contentLanguage, VmUpdateNicParams vmUpdateNicParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateVmNic(Async)");
        }
        
        // verify the required parameter 'vmUpdateNicParams' is set
        if (vmUpdateNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateNicParams' when calling updateVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmNicCall(contentLanguage, vmUpdateNicParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateNicParams  (required)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVmNic(String contentLanguage, VmUpdateNicParams vmUpdateNicParams) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmNicWithHttpInfo(contentLanguage, vmUpdateNicParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateNicParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmNicWithHttpInfo(String contentLanguage, VmUpdateNicParams vmUpdateNicParams) throws ApiException {
        okhttp3.Call localVarCall = updateVmNicValidateBeforeCall(contentLanguage, vmUpdateNicParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmUpdateNicParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmNicAsync(String contentLanguage, VmUpdateNicParams vmUpdateNicParams, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmNicValidateBeforeCall(contentLanguage, vmUpdateNicParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
