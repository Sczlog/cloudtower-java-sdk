/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetNfsExportsConnectionRequestBody;
import com.smartx.tower.model.GetNfsExportsRequestBody;
import com.smartx.tower.model.NfsExport;
import com.smartx.tower.model.NfsExportConnection;
import com.smartx.tower.model.NfsExportCreationParams;
import com.smartx.tower.model.NfsExportDeletionParams;
import com.smartx.tower.model.NfsExportUpdationParams;
import com.smartx.tower.model.WithTaskDeleteNfsExport;
import com.smartx.tower.model.WithTaskNfsExport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NfsExportApi {
    private ApiClient localVarApiClient;

    public NfsExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NfsExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNfsExport
     * @param contentLanguage  (required)
     * @param nfsExportCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNfsExportCall(String contentLanguage, List<NfsExportCreationParams> nfsExportCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nfsExportCreationParams;

        // create path and map variables
        String localVarPath = "/create-nfs-export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNfsExportValidateBeforeCall(String contentLanguage, List<NfsExportCreationParams> nfsExportCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createNfsExport(Async)");
        }
        
        // verify the required parameter 'nfsExportCreationParams' is set
        if (nfsExportCreationParams == null) {
            throw new ApiException("Missing the required parameter 'nfsExportCreationParams' when calling createNfsExport(Async)");
        }
        

        okhttp3.Call localVarCall = createNfsExportCall(contentLanguage, nfsExportCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportCreationParams  (required)
     * @return List&lt;WithTaskNfsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNfsExport> createNfsExport(String contentLanguage, List<NfsExportCreationParams> nfsExportCreationParams) throws ApiException {
        ApiResponse<List<WithTaskNfsExport>> localVarResp = createNfsExportWithHttpInfo(contentLanguage, nfsExportCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNfsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNfsExport>> createNfsExportWithHttpInfo(String contentLanguage, List<NfsExportCreationParams> nfsExportCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createNfsExportValidateBeforeCall(contentLanguage, nfsExportCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNfsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nfsExportCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNfsExportAsync(String contentLanguage, List<NfsExportCreationParams> nfsExportCreationParams, final ApiCallback<List<WithTaskNfsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNfsExportValidateBeforeCall(contentLanguage, nfsExportCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNfsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNfsExport
     * @param contentLanguage  (required)
     * @param nfsExportDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNfsExportCall(String contentLanguage, NfsExportDeletionParams nfsExportDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nfsExportDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-nfs-export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNfsExportValidateBeforeCall(String contentLanguage, NfsExportDeletionParams nfsExportDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteNfsExport(Async)");
        }
        
        // verify the required parameter 'nfsExportDeletionParams' is set
        if (nfsExportDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'nfsExportDeletionParams' when calling deleteNfsExport(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNfsExportCall(contentLanguage, nfsExportDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportDeletionParams  (required)
     * @return List&lt;WithTaskDeleteNfsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteNfsExport> deleteNfsExport(String contentLanguage, NfsExportDeletionParams nfsExportDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteNfsExport>> localVarResp = deleteNfsExportWithHttpInfo(contentLanguage, nfsExportDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteNfsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteNfsExport>> deleteNfsExportWithHttpInfo(String contentLanguage, NfsExportDeletionParams nfsExportDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteNfsExportValidateBeforeCall(contentLanguage, nfsExportDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteNfsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nfsExportDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNfsExportAsync(String contentLanguage, NfsExportDeletionParams nfsExportDeletionParams, final ApiCallback<List<WithTaskDeleteNfsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNfsExportValidateBeforeCall(contentLanguage, nfsExportDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteNfsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNfsExports
     * @param contentLanguage  (required)
     * @param getNfsExportsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNfsExportsCall(String contentLanguage, GetNfsExportsRequestBody getNfsExportsRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getNfsExportsRequestBody;

        // create path and map variables
        String localVarPath = "/get-nfs-exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNfsExportsValidateBeforeCall(String contentLanguage, GetNfsExportsRequestBody getNfsExportsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getNfsExports(Async)");
        }
        
        // verify the required parameter 'getNfsExportsRequestBody' is set
        if (getNfsExportsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getNfsExportsRequestBody' when calling getNfsExports(Async)");
        }
        

        okhttp3.Call localVarCall = getNfsExportsCall(contentLanguage, getNfsExportsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsRequestBody  (required)
     * @return List&lt;NfsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<NfsExport> getNfsExports(String contentLanguage, GetNfsExportsRequestBody getNfsExportsRequestBody) throws ApiException {
        ApiResponse<List<NfsExport>> localVarResp = getNfsExportsWithHttpInfo(contentLanguage, getNfsExportsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;NfsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NfsExport>> getNfsExportsWithHttpInfo(String contentLanguage, GetNfsExportsRequestBody getNfsExportsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getNfsExportsValidateBeforeCall(contentLanguage, getNfsExportsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<NfsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNfsExportsAsync(String contentLanguage, GetNfsExportsRequestBody getNfsExportsRequestBody, final ApiCallback<List<NfsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNfsExportsValidateBeforeCall(contentLanguage, getNfsExportsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<NfsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNfsExportsConnection
     * @param contentLanguage  (required)
     * @param getNfsExportsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNfsExportsConnectionCall(String contentLanguage, GetNfsExportsConnectionRequestBody getNfsExportsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getNfsExportsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-nfs-exports-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNfsExportsConnectionValidateBeforeCall(String contentLanguage, GetNfsExportsConnectionRequestBody getNfsExportsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getNfsExportsConnection(Async)");
        }
        
        // verify the required parameter 'getNfsExportsConnectionRequestBody' is set
        if (getNfsExportsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getNfsExportsConnectionRequestBody' when calling getNfsExportsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getNfsExportsConnectionCall(contentLanguage, getNfsExportsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsConnectionRequestBody  (required)
     * @return NfsExportConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NfsExportConnection getNfsExportsConnection(String contentLanguage, GetNfsExportsConnectionRequestBody getNfsExportsConnectionRequestBody) throws ApiException {
        ApiResponse<NfsExportConnection> localVarResp = getNfsExportsConnectionWithHttpInfo(contentLanguage, getNfsExportsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsConnectionRequestBody  (required)
     * @return ApiResponse&lt;NfsExportConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NfsExportConnection> getNfsExportsConnectionWithHttpInfo(String contentLanguage, GetNfsExportsConnectionRequestBody getNfsExportsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getNfsExportsConnectionValidateBeforeCall(contentLanguage, getNfsExportsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<NfsExportConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getNfsExportsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNfsExportsConnectionAsync(String contentLanguage, GetNfsExportsConnectionRequestBody getNfsExportsConnectionRequestBody, final ApiCallback<NfsExportConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNfsExportsConnectionValidateBeforeCall(contentLanguage, getNfsExportsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<NfsExportConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNfsExport
     * @param contentLanguage  (required)
     * @param nfsExportUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNfsExportCall(String contentLanguage, NfsExportUpdationParams nfsExportUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nfsExportUpdationParams;

        // create path and map variables
        String localVarPath = "/update-nfs-export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNfsExportValidateBeforeCall(String contentLanguage, NfsExportUpdationParams nfsExportUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateNfsExport(Async)");
        }
        
        // verify the required parameter 'nfsExportUpdationParams' is set
        if (nfsExportUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'nfsExportUpdationParams' when calling updateNfsExport(Async)");
        }
        

        okhttp3.Call localVarCall = updateNfsExportCall(contentLanguage, nfsExportUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportUpdationParams  (required)
     * @return List&lt;WithTaskNfsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNfsExport> updateNfsExport(String contentLanguage, NfsExportUpdationParams nfsExportUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskNfsExport>> localVarResp = updateNfsExportWithHttpInfo(contentLanguage, nfsExportUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nfsExportUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNfsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNfsExport>> updateNfsExportWithHttpInfo(String contentLanguage, NfsExportUpdationParams nfsExportUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateNfsExportValidateBeforeCall(contentLanguage, nfsExportUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNfsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nfsExportUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNfsExportAsync(String contentLanguage, NfsExportUpdationParams nfsExportUpdationParams, final ApiCallback<List<WithTaskNfsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNfsExportValidateBeforeCall(contentLanguage, nfsExportUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNfsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
