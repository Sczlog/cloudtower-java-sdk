/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetVlansConnectionRequestBody;
import com.smartx.tower.model.GetVlansRequestBody;
import com.smartx.tower.model.ManagementVlanUpdationParams;
import com.smartx.tower.model.MigrationVlanUpdationParams;
import com.smartx.tower.model.Vlan;
import com.smartx.tower.model.VlanConnection;
import com.smartx.tower.model.VlanDeletionParams;
import com.smartx.tower.model.VmVlanCreationParams;
import com.smartx.tower.model.VmVlanUpdationParams;
import com.smartx.tower.model.WithTaskDeleteVlan;
import com.smartx.tower.model.WithTaskVlan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VlanApi {
    private ApiClient localVarApiClient;

    public VlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createVmVlan
     * @param contentLanguage  (required)
     * @param vmVlanCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmVlanCall(String contentLanguage, List<VmVlanCreationParams> vmVlanCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmVlanCreationParams;

        // create path and map variables
        String localVarPath = "/create-vm-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmVlanValidateBeforeCall(String contentLanguage, List<VmVlanCreationParams> vmVlanCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createVmVlan(Async)");
        }
        
        // verify the required parameter 'vmVlanCreationParams' is set
        if (vmVlanCreationParams == null) {
            throw new ApiException("Missing the required parameter 'vmVlanCreationParams' when calling createVmVlan(Async)");
        }
        

        okhttp3.Call localVarCall = createVmVlanCall(contentLanguage, vmVlanCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmVlanCreationParams  (required)
     * @return List&lt;WithTaskVlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVlan> createVmVlan(String contentLanguage, List<VmVlanCreationParams> vmVlanCreationParams) throws ApiException {
        ApiResponse<List<WithTaskVlan>> localVarResp = createVmVlanWithHttpInfo(contentLanguage, vmVlanCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmVlanCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVlan>> createVmVlanWithHttpInfo(String contentLanguage, List<VmVlanCreationParams> vmVlanCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createVmVlanValidateBeforeCall(contentLanguage, vmVlanCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmVlanCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmVlanAsync(String contentLanguage, List<VmVlanCreationParams> vmVlanCreationParams, final ApiCallback<List<WithTaskVlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmVlanValidateBeforeCall(contentLanguage, vmVlanCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVlan
     * @param contentLanguage  (required)
     * @param vlanDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVlanCall(String contentLanguage, VlanDeletionParams vlanDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vlanDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-vm-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVlanValidateBeforeCall(String contentLanguage, VlanDeletionParams vlanDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteVlan(Async)");
        }
        
        // verify the required parameter 'vlanDeletionParams' is set
        if (vlanDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'vlanDeletionParams' when calling deleteVlan(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVlanCall(contentLanguage, vlanDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vlanDeletionParams  (required)
     * @return List&lt;WithTaskDeleteVlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVlan> deleteVlan(String contentLanguage, VlanDeletionParams vlanDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteVlan>> localVarResp = deleteVlanWithHttpInfo(contentLanguage, vlanDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vlanDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVlan>> deleteVlanWithHttpInfo(String contentLanguage, VlanDeletionParams vlanDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteVlanValidateBeforeCall(contentLanguage, vlanDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vlanDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVlanAsync(String contentLanguage, VlanDeletionParams vlanDeletionParams, final ApiCallback<List<WithTaskDeleteVlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVlanValidateBeforeCall(contentLanguage, vlanDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVlans
     * @param contentLanguage  (required)
     * @param getVlansRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVlansCall(String contentLanguage, GetVlansRequestBody getVlansRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getVlansRequestBody;

        // create path and map variables
        String localVarPath = "/get-vlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVlansValidateBeforeCall(String contentLanguage, GetVlansRequestBody getVlansRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getVlans(Async)");
        }
        
        // verify the required parameter 'getVlansRequestBody' is set
        if (getVlansRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVlansRequestBody' when calling getVlans(Async)");
        }
        

        okhttp3.Call localVarCall = getVlansCall(contentLanguage, getVlansRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVlansRequestBody  (required)
     * @return List&lt;Vlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Vlan> getVlans(String contentLanguage, GetVlansRequestBody getVlansRequestBody) throws ApiException {
        ApiResponse<List<Vlan>> localVarResp = getVlansWithHttpInfo(contentLanguage, getVlansRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVlansRequestBody  (required)
     * @return ApiResponse&lt;List&lt;Vlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vlan>> getVlansWithHttpInfo(String contentLanguage, GetVlansRequestBody getVlansRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVlansValidateBeforeCall(contentLanguage, getVlansRequestBody, null);
        Type localVarReturnType = new TypeToken<List<Vlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getVlansRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVlansAsync(String contentLanguage, GetVlansRequestBody getVlansRequestBody, final ApiCallback<List<Vlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVlansValidateBeforeCall(contentLanguage, getVlansRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Vlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVlansConnection
     * @param contentLanguage  (required)
     * @param getVlansConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVlansConnectionCall(String contentLanguage, GetVlansConnectionRequestBody getVlansConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getVlansConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-vlans-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVlansConnectionValidateBeforeCall(String contentLanguage, GetVlansConnectionRequestBody getVlansConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getVlansConnection(Async)");
        }
        
        // verify the required parameter 'getVlansConnectionRequestBody' is set
        if (getVlansConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVlansConnectionRequestBody' when calling getVlansConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getVlansConnectionCall(contentLanguage, getVlansConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVlansConnectionRequestBody  (required)
     * @return VlanConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VlanConnection getVlansConnection(String contentLanguage, GetVlansConnectionRequestBody getVlansConnectionRequestBody) throws ApiException {
        ApiResponse<VlanConnection> localVarResp = getVlansConnectionWithHttpInfo(contentLanguage, getVlansConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getVlansConnectionRequestBody  (required)
     * @return ApiResponse&lt;VlanConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VlanConnection> getVlansConnectionWithHttpInfo(String contentLanguage, GetVlansConnectionRequestBody getVlansConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVlansConnectionValidateBeforeCall(contentLanguage, getVlansConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<VlanConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getVlansConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVlansConnectionAsync(String contentLanguage, GetVlansConnectionRequestBody getVlansConnectionRequestBody, final ApiCallback<VlanConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVlansConnectionValidateBeforeCall(contentLanguage, getVlansConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<VlanConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateManagementVlan
     * @param contentLanguage  (required)
     * @param managementVlanUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManagementVlanCall(String contentLanguage, ManagementVlanUpdationParams managementVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = managementVlanUpdationParams;

        // create path and map variables
        String localVarPath = "/update-management-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateManagementVlanValidateBeforeCall(String contentLanguage, ManagementVlanUpdationParams managementVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateManagementVlan(Async)");
        }
        
        // verify the required parameter 'managementVlanUpdationParams' is set
        if (managementVlanUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'managementVlanUpdationParams' when calling updateManagementVlan(Async)");
        }
        

        okhttp3.Call localVarCall = updateManagementVlanCall(contentLanguage, managementVlanUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param managementVlanUpdationParams  (required)
     * @return List&lt;WithTaskVlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVlan> updateManagementVlan(String contentLanguage, ManagementVlanUpdationParams managementVlanUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskVlan>> localVarResp = updateManagementVlanWithHttpInfo(contentLanguage, managementVlanUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param managementVlanUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVlan>> updateManagementVlanWithHttpInfo(String contentLanguage, ManagementVlanUpdationParams managementVlanUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateManagementVlanValidateBeforeCall(contentLanguage, managementVlanUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param managementVlanUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManagementVlanAsync(String contentLanguage, ManagementVlanUpdationParams managementVlanUpdationParams, final ApiCallback<List<WithTaskVlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateManagementVlanValidateBeforeCall(contentLanguage, managementVlanUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMigrationVlan
     * @param contentLanguage  (required)
     * @param migrationVlanUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMigrationVlanCall(String contentLanguage, MigrationVlanUpdationParams migrationVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = migrationVlanUpdationParams;

        // create path and map variables
        String localVarPath = "/update-migration-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMigrationVlanValidateBeforeCall(String contentLanguage, MigrationVlanUpdationParams migrationVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateMigrationVlan(Async)");
        }
        
        // verify the required parameter 'migrationVlanUpdationParams' is set
        if (migrationVlanUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'migrationVlanUpdationParams' when calling updateMigrationVlan(Async)");
        }
        

        okhttp3.Call localVarCall = updateMigrationVlanCall(contentLanguage, migrationVlanUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param migrationVlanUpdationParams  (required)
     * @return List&lt;WithTaskVlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVlan> updateMigrationVlan(String contentLanguage, MigrationVlanUpdationParams migrationVlanUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskVlan>> localVarResp = updateMigrationVlanWithHttpInfo(contentLanguage, migrationVlanUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param migrationVlanUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVlan>> updateMigrationVlanWithHttpInfo(String contentLanguage, MigrationVlanUpdationParams migrationVlanUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateMigrationVlanValidateBeforeCall(contentLanguage, migrationVlanUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param migrationVlanUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMigrationVlanAsync(String contentLanguage, MigrationVlanUpdationParams migrationVlanUpdationParams, final ApiCallback<List<WithTaskVlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMigrationVlanValidateBeforeCall(contentLanguage, migrationVlanUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVlan
     * @param contentLanguage  (required)
     * @param vmVlanUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVlanCall(String contentLanguage, VmVlanUpdationParams vmVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vmVlanUpdationParams;

        // create path and map variables
        String localVarPath = "/update-vm-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVlanValidateBeforeCall(String contentLanguage, VmVlanUpdationParams vmVlanUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateVlan(Async)");
        }
        
        // verify the required parameter 'vmVlanUpdationParams' is set
        if (vmVlanUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'vmVlanUpdationParams' when calling updateVlan(Async)");
        }
        

        okhttp3.Call localVarCall = updateVlanCall(contentLanguage, vmVlanUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmVlanUpdationParams  (required)
     * @return List&lt;WithTaskVlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVlan> updateVlan(String contentLanguage, VmVlanUpdationParams vmVlanUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskVlan>> localVarResp = updateVlanWithHttpInfo(contentLanguage, vmVlanUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param vmVlanUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVlan>> updateVlanWithHttpInfo(String contentLanguage, VmVlanUpdationParams vmVlanUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateVlanValidateBeforeCall(contentLanguage, vmVlanUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param vmVlanUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVlanAsync(String contentLanguage, VmVlanUpdationParams vmVlanUpdationParams, final ApiCallback<List<WithTaskVlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVlanValidateBeforeCall(contentLanguage, vmVlanUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
