/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetIscsiLunsConnectionRequestBody;
import com.smartx.tower.model.GetIscsiLunsRequestBody;
import com.smartx.tower.model.IscsiLun;
import com.smartx.tower.model.IscsiLunCloneParams;
import com.smartx.tower.model.IscsiLunConnection;
import com.smartx.tower.model.IscsiLunCreationParams;
import com.smartx.tower.model.IscsiLunDeletionParams;
import com.smartx.tower.model.IscsiLunRollbackParams;
import com.smartx.tower.model.IscsiLunUpdationParams;
import com.smartx.tower.model.WithTaskDeleteIscsiLun;
import com.smartx.tower.model.WithTaskIscsiLun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IscsiLunApi {
    private ApiClient localVarApiClient;

    public IscsiLunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IscsiLunApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cloneIscsiLunFromSnapshot
     * @param contentLanguage  (required)
     * @param iscsiLunCloneParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneIscsiLunFromSnapshotCall(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiLunCloneParams;

        // create path and map variables
        String localVarPath = "/clone-iscsi-lun-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneIscsiLunFromSnapshotValidateBeforeCall(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling cloneIscsiLunFromSnapshot(Async)");
        }
        
        // verify the required parameter 'iscsiLunCloneParams' is set
        if (iscsiLunCloneParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiLunCloneParams' when calling cloneIscsiLunFromSnapshot(Async)");
        }
        

        okhttp3.Call localVarCall = cloneIscsiLunFromSnapshotCall(contentLanguage, iscsiLunCloneParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCloneParams  (required)
     * @return List&lt;WithTaskIscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiLun> cloneIscsiLunFromSnapshot(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiLun>> localVarResp = cloneIscsiLunFromSnapshotWithHttpInfo(contentLanguage, iscsiLunCloneParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCloneParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiLun>> cloneIscsiLunFromSnapshotWithHttpInfo(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams) throws ApiException {
        okhttp3.Call localVarCall = cloneIscsiLunFromSnapshotValidateBeforeCall(contentLanguage, iscsiLunCloneParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCloneParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneIscsiLunFromSnapshotAsync(String contentLanguage, List<IscsiLunCloneParams> iscsiLunCloneParams, final ApiCallback<List<WithTaskIscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneIscsiLunFromSnapshotValidateBeforeCall(contentLanguage, iscsiLunCloneParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIscsiLun
     * @param contentLanguage  (required)
     * @param iscsiLunCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIscsiLunCall(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiLunCreationParams;

        // create path and map variables
        String localVarPath = "/create-iscsi-lun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIscsiLunValidateBeforeCall(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createIscsiLun(Async)");
        }
        
        // verify the required parameter 'iscsiLunCreationParams' is set
        if (iscsiLunCreationParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiLunCreationParams' when calling createIscsiLun(Async)");
        }
        

        okhttp3.Call localVarCall = createIscsiLunCall(contentLanguage, iscsiLunCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCreationParams  (required)
     * @return List&lt;WithTaskIscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiLun> createIscsiLun(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiLun>> localVarResp = createIscsiLunWithHttpInfo(contentLanguage, iscsiLunCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiLun>> createIscsiLunWithHttpInfo(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createIscsiLunValidateBeforeCall(contentLanguage, iscsiLunCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIscsiLunAsync(String contentLanguage, List<IscsiLunCreationParams> iscsiLunCreationParams, final ApiCallback<List<WithTaskIscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIscsiLunValidateBeforeCall(contentLanguage, iscsiLunCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIscsiLun
     * @param contentLanguage  (required)
     * @param iscsiLunDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIscsiLunCall(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiLunDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-iscsi-lun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIscsiLunValidateBeforeCall(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteIscsiLun(Async)");
        }
        
        // verify the required parameter 'iscsiLunDeletionParams' is set
        if (iscsiLunDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiLunDeletionParams' when calling deleteIscsiLun(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIscsiLunCall(contentLanguage, iscsiLunDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunDeletionParams  (required)
     * @return List&lt;WithTaskDeleteIscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteIscsiLun> deleteIscsiLun(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteIscsiLun>> localVarResp = deleteIscsiLunWithHttpInfo(contentLanguage, iscsiLunDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteIscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteIscsiLun>> deleteIscsiLunWithHttpInfo(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteIscsiLunValidateBeforeCall(contentLanguage, iscsiLunDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteIscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIscsiLunAsync(String contentLanguage, IscsiLunDeletionParams iscsiLunDeletionParams, final ApiCallback<List<WithTaskDeleteIscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIscsiLunValidateBeforeCall(contentLanguage, iscsiLunDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteIscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIscsiLuns
     * @param contentLanguage  (required)
     * @param getIscsiLunsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiLunsCall(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getIscsiLunsRequestBody;

        // create path and map variables
        String localVarPath = "/get-iscsi-luns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIscsiLunsValidateBeforeCall(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getIscsiLuns(Async)");
        }
        
        // verify the required parameter 'getIscsiLunsRequestBody' is set
        if (getIscsiLunsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getIscsiLunsRequestBody' when calling getIscsiLuns(Async)");
        }
        

        okhttp3.Call localVarCall = getIscsiLunsCall(contentLanguage, getIscsiLunsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsRequestBody  (required)
     * @return List&lt;IscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<IscsiLun> getIscsiLuns(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody) throws ApiException {
        ApiResponse<List<IscsiLun>> localVarResp = getIscsiLunsWithHttpInfo(contentLanguage, getIscsiLunsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;IscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IscsiLun>> getIscsiLunsWithHttpInfo(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getIscsiLunsValidateBeforeCall(contentLanguage, getIscsiLunsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<IscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiLunsAsync(String contentLanguage, GetIscsiLunsRequestBody getIscsiLunsRequestBody, final ApiCallback<List<IscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIscsiLunsValidateBeforeCall(contentLanguage, getIscsiLunsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<IscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIscsiLunsConnection
     * @param contentLanguage  (required)
     * @param getIscsiLunsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiLunsConnectionCall(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getIscsiLunsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-iscsi-luns-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIscsiLunsConnectionValidateBeforeCall(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getIscsiLunsConnection(Async)");
        }
        
        // verify the required parameter 'getIscsiLunsConnectionRequestBody' is set
        if (getIscsiLunsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getIscsiLunsConnectionRequestBody' when calling getIscsiLunsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getIscsiLunsConnectionCall(contentLanguage, getIscsiLunsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsConnectionRequestBody  (required)
     * @return IscsiLunConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IscsiLunConnection getIscsiLunsConnection(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody) throws ApiException {
        ApiResponse<IscsiLunConnection> localVarResp = getIscsiLunsConnectionWithHttpInfo(contentLanguage, getIscsiLunsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsConnectionRequestBody  (required)
     * @return ApiResponse&lt;IscsiLunConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IscsiLunConnection> getIscsiLunsConnectionWithHttpInfo(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getIscsiLunsConnectionValidateBeforeCall(contentLanguage, getIscsiLunsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<IscsiLunConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getIscsiLunsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiLunsConnectionAsync(String contentLanguage, GetIscsiLunsConnectionRequestBody getIscsiLunsConnectionRequestBody, final ApiCallback<IscsiLunConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIscsiLunsConnectionValidateBeforeCall(contentLanguage, getIscsiLunsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<IscsiLunConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackIscsiLunFromSnapshot
     * @param contentLanguage  (required)
     * @param iscsiLunRollbackParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackIscsiLunFromSnapshotCall(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiLunRollbackParams;

        // create path and map variables
        String localVarPath = "/rollback-iscsi-lun-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackIscsiLunFromSnapshotValidateBeforeCall(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling rollbackIscsiLunFromSnapshot(Async)");
        }
        
        // verify the required parameter 'iscsiLunRollbackParams' is set
        if (iscsiLunRollbackParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiLunRollbackParams' when calling rollbackIscsiLunFromSnapshot(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackIscsiLunFromSnapshotCall(contentLanguage, iscsiLunRollbackParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunRollbackParams  (required)
     * @return List&lt;WithTaskIscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiLun> rollbackIscsiLunFromSnapshot(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiLun>> localVarResp = rollbackIscsiLunFromSnapshotWithHttpInfo(contentLanguage, iscsiLunRollbackParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunRollbackParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiLun>> rollbackIscsiLunFromSnapshotWithHttpInfo(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams) throws ApiException {
        okhttp3.Call localVarCall = rollbackIscsiLunFromSnapshotValidateBeforeCall(contentLanguage, iscsiLunRollbackParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunRollbackParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackIscsiLunFromSnapshotAsync(String contentLanguage, List<IscsiLunRollbackParams> iscsiLunRollbackParams, final ApiCallback<List<WithTaskIscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackIscsiLunFromSnapshotValidateBeforeCall(contentLanguage, iscsiLunRollbackParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIscsiLun
     * @param contentLanguage  (required)
     * @param iscsiLunUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIscsiLunCall(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiLunUpdationParams;

        // create path and map variables
        String localVarPath = "/update-iscsi-lun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIscsiLunValidateBeforeCall(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateIscsiLun(Async)");
        }
        
        // verify the required parameter 'iscsiLunUpdationParams' is set
        if (iscsiLunUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiLunUpdationParams' when calling updateIscsiLun(Async)");
        }
        

        okhttp3.Call localVarCall = updateIscsiLunCall(contentLanguage, iscsiLunUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunUpdationParams  (required)
     * @return List&lt;WithTaskIscsiLun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiLun> updateIscsiLun(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiLun>> localVarResp = updateIscsiLunWithHttpInfo(contentLanguage, iscsiLunUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiLun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiLun>> updateIscsiLunWithHttpInfo(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateIscsiLunValidateBeforeCall(contentLanguage, iscsiLunUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiLunUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIscsiLunAsync(String contentLanguage, IscsiLunUpdationParams iscsiLunUpdationParams, final ApiCallback<List<WithTaskIscsiLun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIscsiLunValidateBeforeCall(contentLanguage, iscsiLunUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiLun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
