/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.BrickTopo;
import com.smartx.tower.model.BrickTopoConnection;
import com.smartx.tower.model.BrickTopoCreationParams;
import com.smartx.tower.model.BrickTopoDeletionParams;
import com.smartx.tower.model.BrickTopoMoveParams;
import com.smartx.tower.model.BrickTopoUpdationParams;
import com.smartx.tower.model.GetBrickTopoesConnectionRequestBody;
import com.smartx.tower.model.GetBrickTopoesRequestBody;
import com.smartx.tower.model.WithTaskBrickTopo;
import com.smartx.tower.model.WithTaskDeleteBrickTopo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrickTopoApi {
    private ApiClient localVarApiClient;

    public BrickTopoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrickTopoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createBrickTopo
     * @param contentLanguage  (required)
     * @param brickTopoCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrickTopoCall(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brickTopoCreationParams;

        // create path and map variables
        String localVarPath = "/create-brick-topo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrickTopoValidateBeforeCall(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createBrickTopo(Async)");
        }
        
        // verify the required parameter 'brickTopoCreationParams' is set
        if (brickTopoCreationParams == null) {
            throw new ApiException("Missing the required parameter 'brickTopoCreationParams' when calling createBrickTopo(Async)");
        }
        

        okhttp3.Call localVarCall = createBrickTopoCall(contentLanguage, brickTopoCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoCreationParams  (required)
     * @return List&lt;WithTaskBrickTopo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskBrickTopo> createBrickTopo(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams) throws ApiException {
        ApiResponse<List<WithTaskBrickTopo>> localVarResp = createBrickTopoWithHttpInfo(contentLanguage, brickTopoCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskBrickTopo>> createBrickTopoWithHttpInfo(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createBrickTopoValidateBeforeCall(contentLanguage, brickTopoCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param brickTopoCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrickTopoAsync(String contentLanguage, List<BrickTopoCreationParams> brickTopoCreationParams, final ApiCallback<List<WithTaskBrickTopo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrickTopoValidateBeforeCall(contentLanguage, brickTopoCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBrickTopo
     * @param contentLanguage  (required)
     * @param brickTopoDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrickTopoCall(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brickTopoDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-brick-topo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrickTopoValidateBeforeCall(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteBrickTopo(Async)");
        }
        
        // verify the required parameter 'brickTopoDeletionParams' is set
        if (brickTopoDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'brickTopoDeletionParams' when calling deleteBrickTopo(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBrickTopoCall(contentLanguage, brickTopoDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoDeletionParams  (required)
     * @return List&lt;WithTaskDeleteBrickTopo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteBrickTopo> deleteBrickTopo(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteBrickTopo>> localVarResp = deleteBrickTopoWithHttpInfo(contentLanguage, brickTopoDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteBrickTopo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteBrickTopo>> deleteBrickTopoWithHttpInfo(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteBrickTopoValidateBeforeCall(contentLanguage, brickTopoDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteBrickTopo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param brickTopoDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrickTopoAsync(String contentLanguage, BrickTopoDeletionParams brickTopoDeletionParams, final ApiCallback<List<WithTaskDeleteBrickTopo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrickTopoValidateBeforeCall(contentLanguage, brickTopoDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteBrickTopo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrickTopoes
     * @param contentLanguage  (required)
     * @param getBrickTopoesRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTopoesCall(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getBrickTopoesRequestBody;

        // create path and map variables
        String localVarPath = "/get-brick-topoes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrickTopoesValidateBeforeCall(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getBrickTopoes(Async)");
        }
        
        // verify the required parameter 'getBrickTopoesRequestBody' is set
        if (getBrickTopoesRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getBrickTopoesRequestBody' when calling getBrickTopoes(Async)");
        }
        

        okhttp3.Call localVarCall = getBrickTopoesCall(contentLanguage, getBrickTopoesRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesRequestBody  (required)
     * @return List&lt;BrickTopo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<BrickTopo> getBrickTopoes(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody) throws ApiException {
        ApiResponse<List<BrickTopo>> localVarResp = getBrickTopoesWithHttpInfo(contentLanguage, getBrickTopoesRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesRequestBody  (required)
     * @return ApiResponse&lt;List&lt;BrickTopo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BrickTopo>> getBrickTopoesWithHttpInfo(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getBrickTopoesValidateBeforeCall(contentLanguage, getBrickTopoesRequestBody, null);
        Type localVarReturnType = new TypeToken<List<BrickTopo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTopoesAsync(String contentLanguage, GetBrickTopoesRequestBody getBrickTopoesRequestBody, final ApiCallback<List<BrickTopo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrickTopoesValidateBeforeCall(contentLanguage, getBrickTopoesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<BrickTopo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrickTopoesConnection
     * @param contentLanguage  (required)
     * @param getBrickTopoesConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTopoesConnectionCall(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getBrickTopoesConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-brick-topoes-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrickTopoesConnectionValidateBeforeCall(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getBrickTopoesConnection(Async)");
        }
        
        // verify the required parameter 'getBrickTopoesConnectionRequestBody' is set
        if (getBrickTopoesConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getBrickTopoesConnectionRequestBody' when calling getBrickTopoesConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getBrickTopoesConnectionCall(contentLanguage, getBrickTopoesConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesConnectionRequestBody  (required)
     * @return BrickTopoConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BrickTopoConnection getBrickTopoesConnection(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody) throws ApiException {
        ApiResponse<BrickTopoConnection> localVarResp = getBrickTopoesConnectionWithHttpInfo(contentLanguage, getBrickTopoesConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesConnectionRequestBody  (required)
     * @return ApiResponse&lt;BrickTopoConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrickTopoConnection> getBrickTopoesConnectionWithHttpInfo(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getBrickTopoesConnectionValidateBeforeCall(contentLanguage, getBrickTopoesConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<BrickTopoConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getBrickTopoesConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTopoesConnectionAsync(String contentLanguage, GetBrickTopoesConnectionRequestBody getBrickTopoesConnectionRequestBody, final ApiCallback<BrickTopoConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrickTopoesConnectionValidateBeforeCall(contentLanguage, getBrickTopoesConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<BrickTopoConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveBrickTopo
     * @param contentLanguage  (required)
     * @param brickTopoMoveParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveBrickTopoCall(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brickTopoMoveParams;

        // create path and map variables
        String localVarPath = "/move-brick-topo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveBrickTopoValidateBeforeCall(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling moveBrickTopo(Async)");
        }
        
        // verify the required parameter 'brickTopoMoveParams' is set
        if (brickTopoMoveParams == null) {
            throw new ApiException("Missing the required parameter 'brickTopoMoveParams' when calling moveBrickTopo(Async)");
        }
        

        okhttp3.Call localVarCall = moveBrickTopoCall(contentLanguage, brickTopoMoveParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoMoveParams  (required)
     * @return List&lt;WithTaskBrickTopo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskBrickTopo> moveBrickTopo(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams) throws ApiException {
        ApiResponse<List<WithTaskBrickTopo>> localVarResp = moveBrickTopoWithHttpInfo(contentLanguage, brickTopoMoveParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoMoveParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskBrickTopo>> moveBrickTopoWithHttpInfo(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams) throws ApiException {
        okhttp3.Call localVarCall = moveBrickTopoValidateBeforeCall(contentLanguage, brickTopoMoveParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param brickTopoMoveParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveBrickTopoAsync(String contentLanguage, BrickTopoMoveParams brickTopoMoveParams, final ApiCallback<List<WithTaskBrickTopo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveBrickTopoValidateBeforeCall(contentLanguage, brickTopoMoveParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBrickTopo
     * @param contentLanguage  (required)
     * @param brickTopoUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrickTopoCall(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brickTopoUpdationParams;

        // create path and map variables
        String localVarPath = "/update-brick-topo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBrickTopoValidateBeforeCall(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateBrickTopo(Async)");
        }
        
        // verify the required parameter 'brickTopoUpdationParams' is set
        if (brickTopoUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'brickTopoUpdationParams' when calling updateBrickTopo(Async)");
        }
        

        okhttp3.Call localVarCall = updateBrickTopoCall(contentLanguage, brickTopoUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoUpdationParams  (required)
     * @return List&lt;WithTaskBrickTopo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskBrickTopo> updateBrickTopo(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskBrickTopo>> localVarResp = updateBrickTopoWithHttpInfo(contentLanguage, brickTopoUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param brickTopoUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskBrickTopo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskBrickTopo>> updateBrickTopoWithHttpInfo(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateBrickTopoValidateBeforeCall(contentLanguage, brickTopoUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param brickTopoUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrickTopoAsync(String contentLanguage, BrickTopoUpdationParams brickTopoUpdationParams, final ApiCallback<List<WithTaskBrickTopo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBrickTopoValidateBeforeCall(contentLanguage, brickTopoUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskBrickTopo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
