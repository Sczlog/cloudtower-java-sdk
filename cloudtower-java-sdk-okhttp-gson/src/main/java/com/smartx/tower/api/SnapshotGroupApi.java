/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetSnapshotGroupsConnectionRequestBody;
import com.smartx.tower.model.GetSnapshotGroupsRequestBody;
import com.smartx.tower.model.SnapshotGroup;
import com.smartx.tower.model.SnapshotGroupCloneParams;
import com.smartx.tower.model.SnapshotGroupConnection;
import com.smartx.tower.model.SnapshotGroupDeletionParams;
import com.smartx.tower.model.SnapshotGroupKeepParams;
import com.smartx.tower.model.SnapshotGroupRollbackParams;
import com.smartx.tower.model.WithTaskDeleteSnapshotGroup;
import com.smartx.tower.model.WithTaskSnapshotGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotGroupApi {
    private ApiClient localVarApiClient;

    public SnapshotGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotGroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cloneSnapshotGroup
     * @param contentLanguage  (required)
     * @param snapshotGroupCloneParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneSnapshotGroupCall(String contentLanguage, List<SnapshotGroupCloneParams> snapshotGroupCloneParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotGroupCloneParams;

        // create path and map variables
        String localVarPath = "/clone-snapshot-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneSnapshotGroupValidateBeforeCall(String contentLanguage, List<SnapshotGroupCloneParams> snapshotGroupCloneParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling cloneSnapshotGroup(Async)");
        }
        
        // verify the required parameter 'snapshotGroupCloneParams' is set
        if (snapshotGroupCloneParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotGroupCloneParams' when calling cloneSnapshotGroup(Async)");
        }
        

        okhttp3.Call localVarCall = cloneSnapshotGroupCall(contentLanguage, snapshotGroupCloneParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupCloneParams  (required)
     * @return List&lt;WithTaskSnapshotGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotGroup> cloneSnapshotGroup(String contentLanguage, List<SnapshotGroupCloneParams> snapshotGroupCloneParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotGroup>> localVarResp = cloneSnapshotGroupWithHttpInfo(contentLanguage, snapshotGroupCloneParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupCloneParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotGroup>> cloneSnapshotGroupWithHttpInfo(String contentLanguage, List<SnapshotGroupCloneParams> snapshotGroupCloneParams) throws ApiException {
        okhttp3.Call localVarCall = cloneSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupCloneParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupCloneParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneSnapshotGroupAsync(String contentLanguage, List<SnapshotGroupCloneParams> snapshotGroupCloneParams, final ApiCallback<List<WithTaskSnapshotGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupCloneParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSnapshotGroup
     * @param contentLanguage  (required)
     * @param snapshotGroupDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotGroupCall(String contentLanguage, SnapshotGroupDeletionParams snapshotGroupDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotGroupDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-snapshot-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSnapshotGroupValidateBeforeCall(String contentLanguage, SnapshotGroupDeletionParams snapshotGroupDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteSnapshotGroup(Async)");
        }
        
        // verify the required parameter 'snapshotGroupDeletionParams' is set
        if (snapshotGroupDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotGroupDeletionParams' when calling deleteSnapshotGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSnapshotGroupCall(contentLanguage, snapshotGroupDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupDeletionParams  (required)
     * @return List&lt;WithTaskDeleteSnapshotGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteSnapshotGroup> deleteSnapshotGroup(String contentLanguage, SnapshotGroupDeletionParams snapshotGroupDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteSnapshotGroup>> localVarResp = deleteSnapshotGroupWithHttpInfo(contentLanguage, snapshotGroupDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteSnapshotGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteSnapshotGroup>> deleteSnapshotGroupWithHttpInfo(String contentLanguage, SnapshotGroupDeletionParams snapshotGroupDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteSnapshotGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotGroupAsync(String contentLanguage, SnapshotGroupDeletionParams snapshotGroupDeletionParams, final ApiCallback<List<WithTaskDeleteSnapshotGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteSnapshotGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotGroups
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotGroupsCall(String contentLanguage, GetSnapshotGroupsRequestBody getSnapshotGroupsRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getSnapshotGroupsRequestBody;

        // create path and map variables
        String localVarPath = "/get-snapshot-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotGroupsValidateBeforeCall(String contentLanguage, GetSnapshotGroupsRequestBody getSnapshotGroupsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getSnapshotGroups(Async)");
        }
        
        // verify the required parameter 'getSnapshotGroupsRequestBody' is set
        if (getSnapshotGroupsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getSnapshotGroupsRequestBody' when calling getSnapshotGroups(Async)");
        }
        

        okhttp3.Call localVarCall = getSnapshotGroupsCall(contentLanguage, getSnapshotGroupsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsRequestBody  (required)
     * @return List&lt;SnapshotGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SnapshotGroup> getSnapshotGroups(String contentLanguage, GetSnapshotGroupsRequestBody getSnapshotGroupsRequestBody) throws ApiException {
        ApiResponse<List<SnapshotGroup>> localVarResp = getSnapshotGroupsWithHttpInfo(contentLanguage, getSnapshotGroupsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;SnapshotGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SnapshotGroup>> getSnapshotGroupsWithHttpInfo(String contentLanguage, GetSnapshotGroupsRequestBody getSnapshotGroupsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotGroupsValidateBeforeCall(contentLanguage, getSnapshotGroupsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<SnapshotGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotGroupsAsync(String contentLanguage, GetSnapshotGroupsRequestBody getSnapshotGroupsRequestBody, final ApiCallback<List<SnapshotGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotGroupsValidateBeforeCall(contentLanguage, getSnapshotGroupsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<SnapshotGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotGroupsConnection
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotGroupsConnectionCall(String contentLanguage, GetSnapshotGroupsConnectionRequestBody getSnapshotGroupsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getSnapshotGroupsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-snapshot-groups-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotGroupsConnectionValidateBeforeCall(String contentLanguage, GetSnapshotGroupsConnectionRequestBody getSnapshotGroupsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getSnapshotGroupsConnection(Async)");
        }
        
        // verify the required parameter 'getSnapshotGroupsConnectionRequestBody' is set
        if (getSnapshotGroupsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getSnapshotGroupsConnectionRequestBody' when calling getSnapshotGroupsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getSnapshotGroupsConnectionCall(contentLanguage, getSnapshotGroupsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsConnectionRequestBody  (required)
     * @return SnapshotGroupConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotGroupConnection getSnapshotGroupsConnection(String contentLanguage, GetSnapshotGroupsConnectionRequestBody getSnapshotGroupsConnectionRequestBody) throws ApiException {
        ApiResponse<SnapshotGroupConnection> localVarResp = getSnapshotGroupsConnectionWithHttpInfo(contentLanguage, getSnapshotGroupsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsConnectionRequestBody  (required)
     * @return ApiResponse&lt;SnapshotGroupConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotGroupConnection> getSnapshotGroupsConnectionWithHttpInfo(String contentLanguage, GetSnapshotGroupsConnectionRequestBody getSnapshotGroupsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotGroupsConnectionValidateBeforeCall(contentLanguage, getSnapshotGroupsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<SnapshotGroupConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getSnapshotGroupsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotGroupsConnectionAsync(String contentLanguage, GetSnapshotGroupsConnectionRequestBody getSnapshotGroupsConnectionRequestBody, final ApiCallback<SnapshotGroupConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotGroupsConnectionValidateBeforeCall(contentLanguage, getSnapshotGroupsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SnapshotGroupConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keepSnapshotGroup
     * @param contentLanguage  (required)
     * @param snapshotGroupKeepParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keepSnapshotGroupCall(String contentLanguage, SnapshotGroupKeepParams snapshotGroupKeepParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotGroupKeepParams;

        // create path and map variables
        String localVarPath = "/keep-snapshot-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keepSnapshotGroupValidateBeforeCall(String contentLanguage, SnapshotGroupKeepParams snapshotGroupKeepParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling keepSnapshotGroup(Async)");
        }
        
        // verify the required parameter 'snapshotGroupKeepParams' is set
        if (snapshotGroupKeepParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotGroupKeepParams' when calling keepSnapshotGroup(Async)");
        }
        

        okhttp3.Call localVarCall = keepSnapshotGroupCall(contentLanguage, snapshotGroupKeepParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupKeepParams  (required)
     * @return List&lt;WithTaskSnapshotGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotGroup> keepSnapshotGroup(String contentLanguage, SnapshotGroupKeepParams snapshotGroupKeepParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotGroup>> localVarResp = keepSnapshotGroupWithHttpInfo(contentLanguage, snapshotGroupKeepParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupKeepParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotGroup>> keepSnapshotGroupWithHttpInfo(String contentLanguage, SnapshotGroupKeepParams snapshotGroupKeepParams) throws ApiException {
        okhttp3.Call localVarCall = keepSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupKeepParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupKeepParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keepSnapshotGroupAsync(String contentLanguage, SnapshotGroupKeepParams snapshotGroupKeepParams, final ApiCallback<List<WithTaskSnapshotGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keepSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupKeepParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackSnapshotGroup
     * @param contentLanguage  (required)
     * @param snapshotGroupRollbackParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSnapshotGroupCall(String contentLanguage, SnapshotGroupRollbackParams snapshotGroupRollbackParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = snapshotGroupRollbackParams;

        // create path and map variables
        String localVarPath = "/rollback-snapshot-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackSnapshotGroupValidateBeforeCall(String contentLanguage, SnapshotGroupRollbackParams snapshotGroupRollbackParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling rollbackSnapshotGroup(Async)");
        }
        
        // verify the required parameter 'snapshotGroupRollbackParams' is set
        if (snapshotGroupRollbackParams == null) {
            throw new ApiException("Missing the required parameter 'snapshotGroupRollbackParams' when calling rollbackSnapshotGroup(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackSnapshotGroupCall(contentLanguage, snapshotGroupRollbackParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupRollbackParams  (required)
     * @return List&lt;WithTaskSnapshotGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskSnapshotGroup> rollbackSnapshotGroup(String contentLanguage, SnapshotGroupRollbackParams snapshotGroupRollbackParams) throws ApiException {
        ApiResponse<List<WithTaskSnapshotGroup>> localVarResp = rollbackSnapshotGroupWithHttpInfo(contentLanguage, snapshotGroupRollbackParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupRollbackParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskSnapshotGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskSnapshotGroup>> rollbackSnapshotGroupWithHttpInfo(String contentLanguage, SnapshotGroupRollbackParams snapshotGroupRollbackParams) throws ApiException {
        okhttp3.Call localVarCall = rollbackSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupRollbackParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param snapshotGroupRollbackParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSnapshotGroupAsync(String contentLanguage, SnapshotGroupRollbackParams snapshotGroupRollbackParams, final ApiCallback<List<WithTaskSnapshotGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackSnapshotGroupValidateBeforeCall(contentLanguage, snapshotGroupRollbackParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskSnapshotGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
