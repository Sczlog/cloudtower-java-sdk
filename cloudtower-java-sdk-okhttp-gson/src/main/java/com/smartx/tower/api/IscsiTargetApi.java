/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetIscsiTargetsConnectionRequestBody;
import com.smartx.tower.model.GetIscsiTargetsRequestBody;
import com.smartx.tower.model.IscsiTarget;
import com.smartx.tower.model.IscsiTargetConnection;
import com.smartx.tower.model.IscsiTargetCreationParams;
import com.smartx.tower.model.IscsiTargetDeletionParams;
import com.smartx.tower.model.IscsiTargetUpdationParams;
import com.smartx.tower.model.WithTaskDeleteIscsiTarget;
import com.smartx.tower.model.WithTaskIscsiTarget;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IscsiTargetApi {
    private ApiClient localVarApiClient;

    public IscsiTargetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IscsiTargetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createIscsiTarget
     * @param contentLanguage  (required)
     * @param iscsiTargetCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIscsiTargetCall(String contentLanguage, List<IscsiTargetCreationParams> iscsiTargetCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiTargetCreationParams;

        // create path and map variables
        String localVarPath = "/create-iscsi-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIscsiTargetValidateBeforeCall(String contentLanguage, List<IscsiTargetCreationParams> iscsiTargetCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createIscsiTarget(Async)");
        }
        
        // verify the required parameter 'iscsiTargetCreationParams' is set
        if (iscsiTargetCreationParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiTargetCreationParams' when calling createIscsiTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createIscsiTargetCall(contentLanguage, iscsiTargetCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetCreationParams  (required)
     * @return List&lt;WithTaskIscsiTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiTarget> createIscsiTarget(String contentLanguage, List<IscsiTargetCreationParams> iscsiTargetCreationParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiTarget>> localVarResp = createIscsiTargetWithHttpInfo(contentLanguage, iscsiTargetCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiTarget&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiTarget>> createIscsiTargetWithHttpInfo(String contentLanguage, List<IscsiTargetCreationParams> iscsiTargetCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiTarget>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIscsiTargetAsync(String contentLanguage, List<IscsiTargetCreationParams> iscsiTargetCreationParams, final ApiCallback<List<WithTaskIscsiTarget>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiTarget>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIscsiTarget
     * @param contentLanguage  (required)
     * @param iscsiTargetDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIscsiTargetCall(String contentLanguage, IscsiTargetDeletionParams iscsiTargetDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiTargetDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-iscsi-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIscsiTargetValidateBeforeCall(String contentLanguage, IscsiTargetDeletionParams iscsiTargetDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteIscsiTarget(Async)");
        }
        
        // verify the required parameter 'iscsiTargetDeletionParams' is set
        if (iscsiTargetDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiTargetDeletionParams' when calling deleteIscsiTarget(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIscsiTargetCall(contentLanguage, iscsiTargetDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetDeletionParams  (required)
     * @return List&lt;WithTaskDeleteIscsiTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteIscsiTarget> deleteIscsiTarget(String contentLanguage, IscsiTargetDeletionParams iscsiTargetDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteIscsiTarget>> localVarResp = deleteIscsiTargetWithHttpInfo(contentLanguage, iscsiTargetDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteIscsiTarget&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteIscsiTarget>> deleteIscsiTargetWithHttpInfo(String contentLanguage, IscsiTargetDeletionParams iscsiTargetDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteIscsiTarget>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIscsiTargetAsync(String contentLanguage, IscsiTargetDeletionParams iscsiTargetDeletionParams, final ApiCallback<List<WithTaskDeleteIscsiTarget>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteIscsiTarget>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIscsiTargets
     * @param contentLanguage  (required)
     * @param getIscsiTargetsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiTargetsCall(String contentLanguage, GetIscsiTargetsRequestBody getIscsiTargetsRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getIscsiTargetsRequestBody;

        // create path and map variables
        String localVarPath = "/get-iscsi-targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIscsiTargetsValidateBeforeCall(String contentLanguage, GetIscsiTargetsRequestBody getIscsiTargetsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getIscsiTargets(Async)");
        }
        
        // verify the required parameter 'getIscsiTargetsRequestBody' is set
        if (getIscsiTargetsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getIscsiTargetsRequestBody' when calling getIscsiTargets(Async)");
        }
        

        okhttp3.Call localVarCall = getIscsiTargetsCall(contentLanguage, getIscsiTargetsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsRequestBody  (required)
     * @return List&lt;IscsiTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<IscsiTarget> getIscsiTargets(String contentLanguage, GetIscsiTargetsRequestBody getIscsiTargetsRequestBody) throws ApiException {
        ApiResponse<List<IscsiTarget>> localVarResp = getIscsiTargetsWithHttpInfo(contentLanguage, getIscsiTargetsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;IscsiTarget&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IscsiTarget>> getIscsiTargetsWithHttpInfo(String contentLanguage, GetIscsiTargetsRequestBody getIscsiTargetsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getIscsiTargetsValidateBeforeCall(contentLanguage, getIscsiTargetsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<IscsiTarget>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiTargetsAsync(String contentLanguage, GetIscsiTargetsRequestBody getIscsiTargetsRequestBody, final ApiCallback<List<IscsiTarget>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIscsiTargetsValidateBeforeCall(contentLanguage, getIscsiTargetsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<IscsiTarget>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIscsiTargetsConnection
     * @param contentLanguage  (required)
     * @param getIscsiTargetsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiTargetsConnectionCall(String contentLanguage, GetIscsiTargetsConnectionRequestBody getIscsiTargetsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getIscsiTargetsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-iscsi-targets-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIscsiTargetsConnectionValidateBeforeCall(String contentLanguage, GetIscsiTargetsConnectionRequestBody getIscsiTargetsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getIscsiTargetsConnection(Async)");
        }
        
        // verify the required parameter 'getIscsiTargetsConnectionRequestBody' is set
        if (getIscsiTargetsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getIscsiTargetsConnectionRequestBody' when calling getIscsiTargetsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getIscsiTargetsConnectionCall(contentLanguage, getIscsiTargetsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsConnectionRequestBody  (required)
     * @return IscsiTargetConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IscsiTargetConnection getIscsiTargetsConnection(String contentLanguage, GetIscsiTargetsConnectionRequestBody getIscsiTargetsConnectionRequestBody) throws ApiException {
        ApiResponse<IscsiTargetConnection> localVarResp = getIscsiTargetsConnectionWithHttpInfo(contentLanguage, getIscsiTargetsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsConnectionRequestBody  (required)
     * @return ApiResponse&lt;IscsiTargetConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IscsiTargetConnection> getIscsiTargetsConnectionWithHttpInfo(String contentLanguage, GetIscsiTargetsConnectionRequestBody getIscsiTargetsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getIscsiTargetsConnectionValidateBeforeCall(contentLanguage, getIscsiTargetsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<IscsiTargetConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getIscsiTargetsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIscsiTargetsConnectionAsync(String contentLanguage, GetIscsiTargetsConnectionRequestBody getIscsiTargetsConnectionRequestBody, final ApiCallback<IscsiTargetConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIscsiTargetsConnectionValidateBeforeCall(contentLanguage, getIscsiTargetsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<IscsiTargetConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIscsiTarget
     * @param contentLanguage  (required)
     * @param iscsiTargetUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIscsiTargetCall(String contentLanguage, IscsiTargetUpdationParams iscsiTargetUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = iscsiTargetUpdationParams;

        // create path and map variables
        String localVarPath = "/update-iscsi-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIscsiTargetValidateBeforeCall(String contentLanguage, IscsiTargetUpdationParams iscsiTargetUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateIscsiTarget(Async)");
        }
        
        // verify the required parameter 'iscsiTargetUpdationParams' is set
        if (iscsiTargetUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'iscsiTargetUpdationParams' when calling updateIscsiTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateIscsiTargetCall(contentLanguage, iscsiTargetUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetUpdationParams  (required)
     * @return List&lt;WithTaskIscsiTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskIscsiTarget> updateIscsiTarget(String contentLanguage, IscsiTargetUpdationParams iscsiTargetUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskIscsiTarget>> localVarResp = updateIscsiTargetWithHttpInfo(contentLanguage, iscsiTargetUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskIscsiTarget&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskIscsiTarget>> updateIscsiTargetWithHttpInfo(String contentLanguage, IscsiTargetUpdationParams iscsiTargetUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiTarget>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param iscsiTargetUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIscsiTargetAsync(String contentLanguage, IscsiTargetUpdationParams iscsiTargetUpdationParams, final ApiCallback<List<WithTaskIscsiTarget>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIscsiTargetValidateBeforeCall(contentLanguage, iscsiTargetUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskIscsiTarget>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
