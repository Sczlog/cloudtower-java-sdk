/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetNvmfNamespacesConnectionRequestBody;
import com.smartx.tower.model.GetNvmfNamespacesRequestBody;
import com.smartx.tower.model.NvmfNamespace;
import com.smartx.tower.model.NvmfNamespaceCloneParams;
import com.smartx.tower.model.NvmfNamespaceConnection;
import com.smartx.tower.model.NvmfNamespaceCreationParams;
import com.smartx.tower.model.NvmfNamespaceDeletionParams;
import com.smartx.tower.model.NvmfNamespaceRollbackParams;
import com.smartx.tower.model.NvmfNamespaceUpdationParams;
import com.smartx.tower.model.WithTaskDeleteNvmfNamespace;
import com.smartx.tower.model.WithTaskNvmfNamespace;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NvmfNamespaceApi {
    private ApiClient localVarApiClient;

    public NvmfNamespaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NvmfNamespaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cloneNvmfNamespaceFromSnapshot
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCloneParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneNvmfNamespaceFromSnapshotCall(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nvmfNamespaceCloneParams;

        // create path and map variables
        String localVarPath = "/clone-nvmf-namespace-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneNvmfNamespaceFromSnapshotValidateBeforeCall(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling cloneNvmfNamespaceFromSnapshot(Async)");
        }
        
        // verify the required parameter 'nvmfNamespaceCloneParams' is set
        if (nvmfNamespaceCloneParams == null) {
            throw new ApiException("Missing the required parameter 'nvmfNamespaceCloneParams' when calling cloneNvmfNamespaceFromSnapshot(Async)");
        }
        

        okhttp3.Call localVarCall = cloneNvmfNamespaceFromSnapshotCall(contentLanguage, nvmfNamespaceCloneParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCloneParams  (required)
     * @return List&lt;WithTaskNvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNvmfNamespace> cloneNvmfNamespaceFromSnapshot(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams) throws ApiException {
        ApiResponse<List<WithTaskNvmfNamespace>> localVarResp = cloneNvmfNamespaceFromSnapshotWithHttpInfo(contentLanguage, nvmfNamespaceCloneParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCloneParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNvmfNamespace>> cloneNvmfNamespaceFromSnapshotWithHttpInfo(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams) throws ApiException {
        okhttp3.Call localVarCall = cloneNvmfNamespaceFromSnapshotValidateBeforeCall(contentLanguage, nvmfNamespaceCloneParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCloneParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneNvmfNamespaceFromSnapshotAsync(String contentLanguage, List<NvmfNamespaceCloneParams> nvmfNamespaceCloneParams, final ApiCallback<List<WithTaskNvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneNvmfNamespaceFromSnapshotValidateBeforeCall(contentLanguage, nvmfNamespaceCloneParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNvmfNamespace
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNvmfNamespaceCall(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nvmfNamespaceCreationParams;

        // create path and map variables
        String localVarPath = "/create-nvmf-namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNvmfNamespaceValidateBeforeCall(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createNvmfNamespace(Async)");
        }
        
        // verify the required parameter 'nvmfNamespaceCreationParams' is set
        if (nvmfNamespaceCreationParams == null) {
            throw new ApiException("Missing the required parameter 'nvmfNamespaceCreationParams' when calling createNvmfNamespace(Async)");
        }
        

        okhttp3.Call localVarCall = createNvmfNamespaceCall(contentLanguage, nvmfNamespaceCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCreationParams  (required)
     * @return List&lt;WithTaskNvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNvmfNamespace> createNvmfNamespace(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams) throws ApiException {
        ApiResponse<List<WithTaskNvmfNamespace>> localVarResp = createNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNvmfNamespace>> createNvmfNamespaceWithHttpInfo(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNvmfNamespaceAsync(String contentLanguage, List<NvmfNamespaceCreationParams> nvmfNamespaceCreationParams, final ApiCallback<List<WithTaskNvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNvmfNamespace
     * @param contentLanguage  (required)
     * @param nvmfNamespaceDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNvmfNamespaceCall(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nvmfNamespaceDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-nvmf-namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNvmfNamespaceValidateBeforeCall(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteNvmfNamespace(Async)");
        }
        
        // verify the required parameter 'nvmfNamespaceDeletionParams' is set
        if (nvmfNamespaceDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'nvmfNamespaceDeletionParams' when calling deleteNvmfNamespace(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNvmfNamespaceCall(contentLanguage, nvmfNamespaceDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceDeletionParams  (required)
     * @return List&lt;WithTaskDeleteNvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteNvmfNamespace> deleteNvmfNamespace(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteNvmfNamespace>> localVarResp = deleteNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteNvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteNvmfNamespace>> deleteNvmfNamespaceWithHttpInfo(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteNvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNvmfNamespaceAsync(String contentLanguage, NvmfNamespaceDeletionParams nvmfNamespaceDeletionParams, final ApiCallback<List<WithTaskDeleteNvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteNvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNvmfNamespaces
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNvmfNamespacesCall(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getNvmfNamespacesRequestBody;

        // create path and map variables
        String localVarPath = "/get-nvmf-namespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNvmfNamespacesValidateBeforeCall(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getNvmfNamespaces(Async)");
        }
        
        // verify the required parameter 'getNvmfNamespacesRequestBody' is set
        if (getNvmfNamespacesRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getNvmfNamespacesRequestBody' when calling getNvmfNamespaces(Async)");
        }
        

        okhttp3.Call localVarCall = getNvmfNamespacesCall(contentLanguage, getNvmfNamespacesRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesRequestBody  (required)
     * @return List&lt;NvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<NvmfNamespace> getNvmfNamespaces(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody) throws ApiException {
        ApiResponse<List<NvmfNamespace>> localVarResp = getNvmfNamespacesWithHttpInfo(contentLanguage, getNvmfNamespacesRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesRequestBody  (required)
     * @return ApiResponse&lt;List&lt;NvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NvmfNamespace>> getNvmfNamespacesWithHttpInfo(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getNvmfNamespacesValidateBeforeCall(contentLanguage, getNvmfNamespacesRequestBody, null);
        Type localVarReturnType = new TypeToken<List<NvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNvmfNamespacesAsync(String contentLanguage, GetNvmfNamespacesRequestBody getNvmfNamespacesRequestBody, final ApiCallback<List<NvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNvmfNamespacesValidateBeforeCall(contentLanguage, getNvmfNamespacesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<NvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNvmfNamespacesConnection
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNvmfNamespacesConnectionCall(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getNvmfNamespacesConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-nvmf-namespaces-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNvmfNamespacesConnectionValidateBeforeCall(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getNvmfNamespacesConnection(Async)");
        }
        
        // verify the required parameter 'getNvmfNamespacesConnectionRequestBody' is set
        if (getNvmfNamespacesConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getNvmfNamespacesConnectionRequestBody' when calling getNvmfNamespacesConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getNvmfNamespacesConnectionCall(contentLanguage, getNvmfNamespacesConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesConnectionRequestBody  (required)
     * @return NvmfNamespaceConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NvmfNamespaceConnection getNvmfNamespacesConnection(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody) throws ApiException {
        ApiResponse<NvmfNamespaceConnection> localVarResp = getNvmfNamespacesConnectionWithHttpInfo(contentLanguage, getNvmfNamespacesConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesConnectionRequestBody  (required)
     * @return ApiResponse&lt;NvmfNamespaceConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NvmfNamespaceConnection> getNvmfNamespacesConnectionWithHttpInfo(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getNvmfNamespacesConnectionValidateBeforeCall(contentLanguage, getNvmfNamespacesConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<NvmfNamespaceConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param getNvmfNamespacesConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNvmfNamespacesConnectionAsync(String contentLanguage, GetNvmfNamespacesConnectionRequestBody getNvmfNamespacesConnectionRequestBody, final ApiCallback<NvmfNamespaceConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNvmfNamespacesConnectionValidateBeforeCall(contentLanguage, getNvmfNamespacesConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<NvmfNamespaceConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackNvmfNamespaceFromSnapshot
     * @param contentLanguage  (required)
     * @param nvmfNamespaceRollbackParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackNvmfNamespaceFromSnapshotCall(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nvmfNamespaceRollbackParams;

        // create path and map variables
        String localVarPath = "/rollback-nvmf-namespace-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackNvmfNamespaceFromSnapshotValidateBeforeCall(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling rollbackNvmfNamespaceFromSnapshot(Async)");
        }
        
        // verify the required parameter 'nvmfNamespaceRollbackParams' is set
        if (nvmfNamespaceRollbackParams == null) {
            throw new ApiException("Missing the required parameter 'nvmfNamespaceRollbackParams' when calling rollbackNvmfNamespaceFromSnapshot(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackNvmfNamespaceFromSnapshotCall(contentLanguage, nvmfNamespaceRollbackParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceRollbackParams  (required)
     * @return List&lt;WithTaskNvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNvmfNamespace> rollbackNvmfNamespaceFromSnapshot(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams) throws ApiException {
        ApiResponse<List<WithTaskNvmfNamespace>> localVarResp = rollbackNvmfNamespaceFromSnapshotWithHttpInfo(contentLanguage, nvmfNamespaceRollbackParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceRollbackParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNvmfNamespace>> rollbackNvmfNamespaceFromSnapshotWithHttpInfo(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams) throws ApiException {
        okhttp3.Call localVarCall = rollbackNvmfNamespaceFromSnapshotValidateBeforeCall(contentLanguage, nvmfNamespaceRollbackParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceRollbackParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackNvmfNamespaceFromSnapshotAsync(String contentLanguage, List<NvmfNamespaceRollbackParams> nvmfNamespaceRollbackParams, final ApiCallback<List<WithTaskNvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackNvmfNamespaceFromSnapshotValidateBeforeCall(contentLanguage, nvmfNamespaceRollbackParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNvmfNamespace
     * @param contentLanguage  (required)
     * @param nvmfNamespaceUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNvmfNamespaceCall(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nvmfNamespaceUpdationParams;

        // create path and map variables
        String localVarPath = "/update-nvmf-namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNvmfNamespaceValidateBeforeCall(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateNvmfNamespace(Async)");
        }
        
        // verify the required parameter 'nvmfNamespaceUpdationParams' is set
        if (nvmfNamespaceUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'nvmfNamespaceUpdationParams' when calling updateNvmfNamespace(Async)");
        }
        

        okhttp3.Call localVarCall = updateNvmfNamespaceCall(contentLanguage, nvmfNamespaceUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceUpdationParams  (required)
     * @return List&lt;WithTaskNvmfNamespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskNvmfNamespace> updateNvmfNamespace(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskNvmfNamespace>> localVarResp = updateNvmfNamespaceWithHttpInfo(contentLanguage, nvmfNamespaceUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskNvmfNamespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskNvmfNamespace>> updateNvmfNamespaceWithHttpInfo(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentLanguage  (required)
     * @param nvmfNamespaceUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNvmfNamespaceAsync(String contentLanguage, NvmfNamespaceUpdationParams nvmfNamespaceUpdationParams, final ApiCallback<List<WithTaskNvmfNamespace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNvmfNamespaceValidateBeforeCall(contentLanguage, nvmfNamespaceUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskNvmfNamespace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
