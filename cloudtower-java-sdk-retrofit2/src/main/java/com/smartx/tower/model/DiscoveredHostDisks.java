/*
 * Tower SDK API
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.smartx.tower.model.DiskFunction;
import com.smartx.tower.model.DiskType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DiscoveredHostDisks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-03T10:48:29.490085800+08:00[Asia/Shanghai]")
public class DiscoveredHostDisks {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DiskType type;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Double size;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_PERSISTENT_MEMORY_TYPE = "persistent_memory_type";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_MEMORY_TYPE)
  private String persistentMemoryType;

  public static final String SERIALIZED_NAME_NUMA_NODE = "numa_node";
  @SerializedName(SERIALIZED_NAME_NUMA_NODE)
  private Double numaNode;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private DiskFunction function;

  public static final String SERIALIZED_NAME_DRIVE = "drive";
  @SerializedName(SERIALIZED_NAME_DRIVE)
  private String drive;

  public static final String SERIALIZED_NAME_DIMM_IDS = "dimm_ids";
  @SerializedName(SERIALIZED_NAME_DIMM_IDS)
  private List<String> dimmIds = null;


  public DiscoveredHostDisks type(DiskType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DiskType getType() {
    return type;
  }


  public void setType(DiskType type) {
    this.type = type;
  }


  public DiscoveredHostDisks size(Double size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getSize() {
    return size;
  }


  public void setSize(Double size) {
    this.size = size;
  }


  public DiscoveredHostDisks serial(String serial) {
    
    this.serial = serial;
    return this;
  }

   /**
   * Get serial
   * @return serial
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSerial() {
    return serial;
  }


  public void setSerial(String serial) {
    this.serial = serial;
  }


  public DiscoveredHostDisks persistentMemoryType(String persistentMemoryType) {
    
    this.persistentMemoryType = persistentMemoryType;
    return this;
  }

   /**
   * Get persistentMemoryType
   * @return persistentMemoryType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPersistentMemoryType() {
    return persistentMemoryType;
  }


  public void setPersistentMemoryType(String persistentMemoryType) {
    this.persistentMemoryType = persistentMemoryType;
  }


  public DiscoveredHostDisks numaNode(Double numaNode) {
    
    this.numaNode = numaNode;
    return this;
  }

   /**
   * Get numaNode
   * @return numaNode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNumaNode() {
    return numaNode;
  }


  public void setNumaNode(Double numaNode) {
    this.numaNode = numaNode;
  }


  public DiscoveredHostDisks model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public DiscoveredHostDisks function(DiskFunction function) {
    
    this.function = function;
    return this;
  }

   /**
   * Get function
   * @return function
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DiskFunction getFunction() {
    return function;
  }


  public void setFunction(DiskFunction function) {
    this.function = function;
  }


  public DiscoveredHostDisks drive(String drive) {
    
    this.drive = drive;
    return this;
  }

   /**
   * Get drive
   * @return drive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDrive() {
    return drive;
  }


  public void setDrive(String drive) {
    this.drive = drive;
  }


  public DiscoveredHostDisks dimmIds(List<String> dimmIds) {
    
    this.dimmIds = dimmIds;
    return this;
  }

  public DiscoveredHostDisks addDimmIdsItem(String dimmIdsItem) {
    if (this.dimmIds == null) {
      this.dimmIds = new ArrayList<String>();
    }
    this.dimmIds.add(dimmIdsItem);
    return this;
  }

   /**
   * Get dimmIds
   * @return dimmIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDimmIds() {
    return dimmIds;
  }


  public void setDimmIds(List<String> dimmIds) {
    this.dimmIds = dimmIds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveredHostDisks discoveredHostDisks = (DiscoveredHostDisks) o;
    return Objects.equals(this.type, discoveredHostDisks.type) &&
        Objects.equals(this.size, discoveredHostDisks.size) &&
        Objects.equals(this.serial, discoveredHostDisks.serial) &&
        Objects.equals(this.persistentMemoryType, discoveredHostDisks.persistentMemoryType) &&
        Objects.equals(this.numaNode, discoveredHostDisks.numaNode) &&
        Objects.equals(this.model, discoveredHostDisks.model) &&
        Objects.equals(this.function, discoveredHostDisks.function) &&
        Objects.equals(this.drive, discoveredHostDisks.drive) &&
        Objects.equals(this.dimmIds, discoveredHostDisks.dimmIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, size, serial, persistentMemoryType, numaNode, model, function, drive, dimmIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveredHostDisks {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    persistentMemoryType: ").append(toIndentedString(persistentMemoryType)).append("\n");
    sb.append("    numaNode: ").append(toIndentedString(numaNode)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    drive: ").append(toIndentedString(drive)).append("\n");
    sb.append("    dimmIds: ").append(toIndentedString(dimmIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

